use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TriggerType : * `CONTINUOUS`: Indicates that the job should be running perpetually; will start if not triggered * `PERIODIC`: Schedules that periodically trigger runs, such as a cron scheduler. * `ONE_TIME`: One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API. * `RETRY`: Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures.

/// * `CONTINUOUS`: Indicates that the job should be running perpetually; will start if not triggered * `PERIODIC`: Schedules that periodically trigger runs, such as a cron scheduler. * `ONE_TIME`: One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API. * `RETRY`: Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TriggerType {
    #[serde(rename = "CONTINUOUS")]
    Continuous,
    #[serde(rename = "PERIODIC")]
    Periodic,
    #[serde(rename = "ONE_TIME")]
    OneTime,
    #[serde(rename = "RETRY")]
    Retry,

}

impl ToString for TriggerType {
    fn to_string(&self) -> String {
        match self {
            Self::Continuous => String::from("CONTINUOUS"),
            Self::Periodic => String::from("PERIODIC"),
            Self::OneTime => String::from("ONE_TIME"),
            Self::Retry => String::from("RETRY"),
        }
    }
}

impl Default for TriggerType {
    fn default() -> TriggerType {
        Self::Continuous
    }
}




