use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepairRunInput {
    /// The job run ID of the run to repair. The run must not be in progress.
    #[serde(rename = "run_id", skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i64>,
    /// The task keys of the task runs to repair.
    #[serde(rename = "rerun_tasks", skip_serializing_if = "Option::is_none")]
    pub rerun_tasks: Option<Vec<String>>,
    /// The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run.
    #[serde(rename = "latest_repair_id", skip_serializing_if = "Option::is_none")]
    pub latest_repair_id: Option<i64>,
    /// If true, repair all failed tasks. Only one of rerun_tasks or rerun_all_failed_tasks can be used.
    #[serde(rename = "rerun_all_failed_tasks", skip_serializing_if = "Option::is_none")]
    pub rerun_all_failed_tasks: Option<bool>,
}

impl RepairRunInput {
    pub fn new() -> RepairRunInput {
        RepairRunInput {
            run_id: None,
            rerun_tasks: None,
            latest_repair_id: None,
            rerun_all_failed_tasks: None,
        }
    }
}


