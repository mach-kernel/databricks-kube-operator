use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TerminationType : * SUCCESS: Termination succeeded. * CLIENT_ERROR: Non-retriable. Client must fix parameters before reattempting the cluster creation. * SERVICE_FAULT: Databricks service issue. Client can retry. * CLOUD_FAILURECloud provider infrastructure issue. Client can retry after the underlying issue is resolved. 

/// * SUCCESS: Termination succeeded. * CLIENT_ERROR: Non-retriable. Client must fix parameters before reattempting the cluster creation. * SERVICE_FAULT: Databricks service issue. Client can retry. * CLOUD_FAILURECloud provider infrastructure issue. Client can retry after the underlying issue is resolved. 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TerminationType {
    #[serde(rename = "SUCCESS")]
    Success,
    #[serde(rename = "CLIENT_ERROR")]
    ClientError,
    #[serde(rename = "SERVICE_FAULT")]
    ServiceFault,
    #[serde(rename = "CLOUD_FAILURE")]
    CloudFailure,

}

impl ToString for TerminationType {
    fn to_string(&self) -> String {
        match self {
            Self::Success => String::from("SUCCESS"),
            Self::ClientError => String::from("CLIENT_ERROR"),
            Self::ServiceFault => String::from("SERVICE_FAULT"),
            Self::CloudFailure => String::from("CLOUD_FAILURE"),
        }
    }
}

impl Default for TerminationType {
    fn default() -> TerminationType {
        Self::Success
    }
}




