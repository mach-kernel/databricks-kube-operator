use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(JsonSchema, Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ClusterEvent {
    /// Canonical identifier for the cluster. This field is required.
    #[serde(rename = "cluster_id")]
    pub cluster_id: String,
    /// The timestamp when the event occurred, stored as the number of milliseconds since the unix epoch. Assigned by the Timeline service.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    #[serde(rename = "type")]
    pub r#type: crate::models::ClusterEventType,
    #[serde(rename = "details")]
    pub details: Box<crate::models::EventDetails>,
}

impl ClusterEvent {
    pub fn new(
        cluster_id: String,
        r#type: crate::models::ClusterEventType,
        details: crate::models::EventDetails,
    ) -> ClusterEvent {
        ClusterEvent {
            cluster_id,
            timestamp: None,
            r#type,
            details: Box::new(details),
        }
    }
}
