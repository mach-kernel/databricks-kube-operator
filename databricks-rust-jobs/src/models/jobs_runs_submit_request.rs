use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JobsRunsSubmitRequest {
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<crate::models::RunSubmitTaskSettings>>,
    /// An optional name for the run. The default value is `Untitled`.
    #[serde(rename = "run_name", skip_serializing_if = "Option::is_none")]
    pub run_name: Option<String>,
    #[serde(rename = "webhook_notifications", skip_serializing_if = "Option::is_none")]
    pub webhook_notifications: Option<Box<crate::models::WebhookNotifications>>,
    #[serde(rename = "git_source", skip_serializing_if = "Option::is_none")]
    pub git_source: Option<Box<crate::models::GitSource>>,
    /// An optional timeout applied to each run of this job. The default behavior is to have no timeout.
    #[serde(rename = "timeout_seconds", skip_serializing_if = "Option::is_none")]
    pub timeout_seconds: Option<i32>,
    /// An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.  This token must have at most 64 characters.  For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).
    #[serde(rename = "idempotency_token", skip_serializing_if = "Option::is_none")]
    pub idempotency_token: Option<String>,
    /// List of permissions to set on the job.
    #[serde(rename = "access_control_list", skip_serializing_if = "Option::is_none")]
    pub access_control_list: Option<Vec<crate::models::AccessControlRequest>>,
}

impl JobsRunsSubmitRequest {
    pub fn new() -> JobsRunsSubmitRequest {
        JobsRunsSubmitRequest {
            tasks: None,
            run_name: None,
            webhook_notifications: None,
            git_source: None,
            timeout_seconds: None,
            idempotency_token: None,
            access_control_list: None,
        }
    }
}


