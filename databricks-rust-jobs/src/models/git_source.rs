use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GitSource : This functionality is in Public Preview.  An optional specification for a remote repository containing the notebooks used by this job's notebook tasks.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitSource {
    /// URL of the repository to be cloned by this job. The maximum length is 300 characters.
    #[serde(rename = "git_url", skip_serializing_if = "Option::is_none")]
    pub git_url: Option<String>,
    /// Unique identifier of the service used to host the Git repository. The value is case insensitive.
    #[serde(rename = "git_provider", skip_serializing_if = "Option::is_none")]
    pub git_provider: Option<GitProvider>,
    /// Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters.
    #[serde(rename = "git_branch", skip_serializing_if = "Option::is_none")]
    pub git_branch: Option<String>,
    /// Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters.
    #[serde(rename = "git_tag", skip_serializing_if = "Option::is_none")]
    pub git_tag: Option<String>,
    /// Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters.
    #[serde(rename = "git_commit", skip_serializing_if = "Option::is_none")]
    pub git_commit: Option<String>,
    #[serde(rename = "git_snapshot", skip_serializing_if = "Option::is_none")]
    pub git_snapshot: Option<Box<crate::models::GitSnapshot>>,
}

impl GitSource {
    /// This functionality is in Public Preview.  An optional specification for a remote repository containing the notebooks used by this job's notebook tasks.
    pub fn new() -> GitSource {
        GitSource {
            git_url: None,
            git_provider: None,
            git_branch: None,
            git_tag: None,
            git_commit: None,
            git_snapshot: None,
        }
    }
}

/// Unique identifier of the service used to host the Git repository. The value is case insensitive.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GitProvider {
    #[serde(rename = "gitHub")]
    GitHub,
    #[serde(rename = "bitbucketCloud")]
    BitbucketCloud,
    #[serde(rename = "azureDevOpsServices")]
    AzureDevOpsServices,
    #[serde(rename = "gitHubEnterprise")]
    GitHubEnterprise,
    #[serde(rename = "bitbucketServer")]
    BitbucketServer,
    #[serde(rename = "gitLab")]
    GitLab,
    #[serde(rename = "gitLabEnterpriseEdition")]
    GitLabEnterpriseEdition,
    #[serde(rename = "awsCodeCommit")]
    AwsCodeCommit,
}

impl Default for GitProvider {
    fn default() -> GitProvider {
        Self::GitHub
    }
}

