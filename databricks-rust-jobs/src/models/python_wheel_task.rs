use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PythonWheelTask {
    /// Name of the package to execute
    #[serde(rename = "package_name", skip_serializing_if = "Option::is_none")]
    pub package_name: Option<String>,
    /// Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using `$packageName.$entryPoint()`
    #[serde(rename = "entry_point", skip_serializing_if = "Option::is_none")]
    pub entry_point: Option<String>,
    /// Command-line parameters passed to Python wheel task. Leave it empty if `named_parameters` is not null.
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<String>>,
    /// Command-line parameters passed to Python wheel task in the form of `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if `parameters` is not null.
    #[serde(rename = "named_parameters", skip_serializing_if = "Option::is_none")]
    pub named_parameters: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl PythonWheelTask {
    pub fn new() -> PythonWheelTask {
        PythonWheelTask {
            package_name: None,
            entry_point: None,
            parameters: None,
            named_parameters: None,
        }
    }
}


