use schemars::JsonSchema;
/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs. You should never hard code secrets or store them in plain text. Use the [Secrets API](https://docs.databricks.com/dev-tools/api/latest/secrets.html) to manage secrets in the [Databricks CLI](https://docs.databricks.com/dev-tools/cli/index.html). Use the [Secrets utility](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-secrets) to reference secrets in notebooks and jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ClusterState : * PENDING: Indicates that a cluster is in the process of being created. * RUNNING: Indicates that a cluster has been started and is ready for use. * RESTARTING: Indicates that a cluster is in the process of restarting. * RESIZING: Indicates that a cluster is in the process of adding or removing nodes. * TERMINATING: Indicates that a cluster is in the process of being destroyed. * TERMINATED: Indicates that a cluster has been successfully destroyed. * ERROR: This state is no longer used. It was used to indicate a cluster that failed to be created. `TERMINATING` and `TERMINATED` are used instead. * UNKNOWN: Indicates that a cluster is in an unknown state. A cluster should never be in this state. 

/// * PENDING: Indicates that a cluster is in the process of being created. * RUNNING: Indicates that a cluster has been started and is ready for use. * RESTARTING: Indicates that a cluster is in the process of restarting. * RESIZING: Indicates that a cluster is in the process of adding or removing nodes. * TERMINATING: Indicates that a cluster is in the process of being destroyed. * TERMINATED: Indicates that a cluster has been successfully destroyed. * ERROR: This state is no longer used. It was used to indicate a cluster that failed to be created. `TERMINATING` and `TERMINATED` are used instead. * UNKNOWN: Indicates that a cluster is in an unknown state. A cluster should never be in this state. 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClusterState {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "RESTARTING")]
    Restarting,
    #[serde(rename = "RESIZING")]
    Resizing,
    #[serde(rename = "TERMINATING")]
    Terminating,
    #[serde(rename = "TERMINATED")]
    Terminated,
    #[serde(rename = "ERROR")]
    Error,
    #[serde(rename = "UNKNOWN")]
    Unknown,

}

impl ToString for ClusterState {
    fn to_string(&self) -> String {
        match self {
            Self::Pending => String::from("PENDING"),
            Self::Running => String::from("RUNNING"),
            Self::Restarting => String::from("RESTARTING"),
            Self::Resizing => String::from("RESIZING"),
            Self::Terminating => String::from("TERMINATING"),
            Self::Terminated => String::from("TERMINATED"),
            Self::Error => String::from("ERROR"),
            Self::Unknown => String::from("UNKNOWN"),
        }
    }
}

impl Default for ClusterState {
    fn default() -> ClusterState {
        Self::Pending
    }
}




