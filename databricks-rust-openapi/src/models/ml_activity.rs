use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MlActivity : Activity recorded for the action.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlActivity {
    /// The username of the user that created the object.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "activity_type", skip_serializing_if = "Option::is_none")]
    pub activity_type: Option<crate::models::MlActivityType>,
    /// Unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Target stage of the transition. Valid values are:  * `None`: The initial stage of a model version.  * `Staging`: Staging or pre-production stage.  * `Production`: Production stage.  * `Archived`: Archived stage.
    #[serde(rename = "to_stage", skip_serializing_if = "Option::is_none")]
    pub to_stage: Option<crate::models::Mlstage>,
    /// Source stage of the transition (if the activity is stage transition related). Valid values are:  * `None`: The initial stage of a model version.  * `Staging`: Staging or pre-production stage.  * `Production`: Production stage.  * `Archived`: Archived stage.
    #[serde(rename = "from_stage", skip_serializing_if = "Option::is_none")]
    pub from_stage: Option<crate::models::Mlstage>,
    /// Comment made by system, for example explaining an activity of type `SYSTEM_TRANSITION`. It usually describes a side effect, such as a version being archived as part of another version's stage transition, and may not be returned for some activity types.
    #[serde(rename = "system_comment", skip_serializing_if = "Option::is_none")]
    pub system_comment: Option<String>,
    /// User-provided comment associated with the activity.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Time of the object at last update, as a Unix timestamp in milliseconds.
    #[serde(rename = "last_updated_timestamp", skip_serializing_if = "Option::is_none")]
    pub last_updated_timestamp: Option<i64>,
    /// Creation time of the object, as a Unix timestamp in milliseconds.
    #[serde(rename = "creation_timestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<i64>,
}

impl MlActivity {
    /// Activity recorded for the action.
    pub fn new() -> MlActivity {
        MlActivity {
            user_id: None,
            activity_type: None,
            id: None,
            to_stage: None,
            from_stage: None,
            system_comment: None,
            comment: None,
            last_updated_timestamp: None,
            creation_timestamp: None,
        }
    }
}


