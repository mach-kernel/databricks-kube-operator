use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogUpdateStorageCredential {
    /// Username of current owner of credential.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "databricks_gcp_service_account", skip_serializing_if = "Option::is_none")]
    pub databricks_gcp_service_account: Option<serde_json::Value>,
    /// The Azure service principal configuration.
    #[serde(rename = "azure_service_principal", skip_serializing_if = "Option::is_none")]
    pub azure_service_principal: Option<Box<crate::models::CatalogAzureServicePrincipal>>,
    /// Force update even if there are dependent external locations or external tables.
    #[serde(rename = "force", skip_serializing_if = "Option::is_none")]
    pub force: Option<bool>,
    /// Whether the storage credential is only usable for read operations.
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// The credential name. The name must be unique within the metastore.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Supplying true to this argument skips validation of the updated credential.
    #[serde(rename = "skip_validation", skip_serializing_if = "Option::is_none")]
    pub skip_validation: Option<bool>,
    /// The Azure managed identity configuration.
    #[serde(rename = "azure_managed_identity", skip_serializing_if = "Option::is_none")]
    pub azure_managed_identity: Option<Box<crate::models::CatalogAzureManagedIdentity>>,
    /// The AWS IAM role configuration.
    #[serde(rename = "aws_iam_role", skip_serializing_if = "Option::is_none")]
    pub aws_iam_role: Option<Box<crate::models::CatalogAwsIamRole>>,
    /// Comment associated with the credential.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}

impl CatalogUpdateStorageCredential {
    pub fn new() -> CatalogUpdateStorageCredential {
        CatalogUpdateStorageCredential {
            owner: None,
            databricks_gcp_service_account: None,
            azure_service_principal: None,
            force: None,
            read_only: None,
            name: None,
            skip_validation: None,
            azure_managed_identity: None,
            aws_iam_role: None,
            comment: None,
        }
    }
}


