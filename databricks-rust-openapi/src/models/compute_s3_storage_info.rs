use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeS3StorageInfo {
    /// (Optional) Set canned access control list for the logs, Eg. `bucket-owner-full-control`. If `canned_cal` is set, please make sure the cluster iam role has `s3:PutObjectAcl` permission on the destination bucket and prefix. The full list of possible canned acl can be found at http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl. Please also note that by default only the object owner gets full controls. If you are using cross account role for writing data, you may want to set `bucket-owner-full-control` to make bucket owner able to read the logs.
    #[serde(rename = "canned_acl", skip_serializing_if = "Option::is_none")]
    pub canned_acl: Option<String>,
    /// S3 destination, Eg. `s3://my-bucket/some-prefix` Note that logs will be delivered using cluster iam role, please make sure you set cluster iam role and the role has write access to the destination. Please also note that you cannot use AWS keys to deliver logs.
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    /// (Optional) Flag to enable server side encryption, `false` by default.
    #[serde(rename = "enable_encryption", skip_serializing_if = "Option::is_none")]
    pub enable_encryption: Option<bool>,
    /// (Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It will be used only when encryption is enabled and the default type is `sse-s3`.
    #[serde(rename = "encryption_type", skip_serializing_if = "Option::is_none")]
    pub encryption_type: Option<String>,
    /// S3 endpoint, Eg. `https://s3-us-west-2.amazonaws.com`. Either region or endpoint needs to be set. If both are set, endpoint will be used.
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// (Optional) Kms key which will be used if encryption is enabled and encryption type is set to `sse-kms`.
    #[serde(rename = "kms_key", skip_serializing_if = "Option::is_none")]
    pub kms_key: Option<String>,
    /// S3 region, Eg. `us-west-2`. Either region or endpoint needs to be set. If both are set, endpoint will be used.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

impl ComputeS3StorageInfo {
    pub fn new() -> ComputeS3StorageInfo {
        ComputeS3StorageInfo {
            canned_acl: None,
            destination: None,
            enable_encryption: None,
            encryption_type: None,
            endpoint: None,
            kms_key: None,
            region: None,
        }
    }
}


