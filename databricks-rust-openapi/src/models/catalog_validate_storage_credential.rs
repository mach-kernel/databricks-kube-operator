use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogValidateStorageCredential {
    /// The AWS IAM role configuration.
    #[serde(rename = "aws_iam_role", skip_serializing_if = "Option::is_none")]
    pub aws_iam_role: Option<Box<crate::models::CatalogAwsIamRole>>,
    /// The Azure managed identity configuration.
    #[serde(rename = "azure_managed_identity", skip_serializing_if = "Option::is_none")]
    pub azure_managed_identity: Option<Box<crate::models::CatalogAzureManagedIdentity>>,
    /// The Azure service principal configuration.
    #[serde(rename = "azure_service_principal", skip_serializing_if = "Option::is_none")]
    pub azure_service_principal: Option<Box<crate::models::CatalogAzureServicePrincipal>>,
    #[serde(rename = "databricks_gcp_service_account", skip_serializing_if = "Option::is_none")]
    pub databricks_gcp_service_account: Option<serde_json::Value>,
    /// The name of an existing external location to validate.
    #[serde(rename = "external_location_name", skip_serializing_if = "Option::is_none")]
    pub external_location_name: Option<String>,
    /// Whether the storage credential is only usable for read operations.
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// The name of the storage credential to validate.
    #[serde(rename = "storage_credential_name", skip_serializing_if = "Option::is_none")]
    pub storage_credential_name: Option<serde_json::Value>,
    /// The external location url to validate.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl CatalogValidateStorageCredential {
    pub fn new() -> CatalogValidateStorageCredential {
        CatalogValidateStorageCredential {
            aws_iam_role: None,
            azure_managed_identity: None,
            azure_service_principal: None,
            databricks_gcp_service_account: None,
            external_location_name: None,
            read_only: None,
            storage_credential_name: None,
            url: None,
        }
    }
}


