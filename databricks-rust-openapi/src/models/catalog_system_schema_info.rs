use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogSystemSchemaInfo {
    /// Name of the system schema.
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// The current state of enablement for the system schema. An empty string means the system schema is available and ready for opt-in. 
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
}

impl CatalogSystemSchemaInfo {
    pub fn new() -> CatalogSystemSchemaInfo {
        CatalogSystemSchemaInfo {
            schema: None,
            state: None,
        }
    }
}

/// The current state of enablement for the system schema. An empty string means the system schema is available and ready for opt-in. 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "AVAILABLE")]
    Available,
    #[serde(rename = "ENABLE_INITIALIZED")]
    EnableInitialized,
    #[serde(rename = "ENABLE_COMPLETED")]
    EnableCompleted,
    #[serde(rename = "DISABLE_INITIALIZED")]
    DisableInitialized,
    #[serde(rename = "UNAVAILABLE")]
    Unavailable,
}

impl Default for State {
    fn default() -> State {
        Self::Available
    }
}

