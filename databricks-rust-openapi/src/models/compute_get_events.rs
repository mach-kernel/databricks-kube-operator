use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeGetEvents {
    /// The ID of the cluster to retrieve events about.
    #[serde(rename = "cluster_id")]
    pub cluster_id: String,
    /// The end time in epoch milliseconds. If empty, returns events up to the current time.
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "event_types", skip_serializing_if = "Option::is_none")]
    pub event_types: Option<Vec<crate::models::ComputeEventType>>,
    /// The maximum number of events to include in a page of events. Defaults to 50, and maximum allowed value is 500.
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i64>,
    /// The offset in the result set. Defaults to 0 (no offset). When an offset is specified and the results are requested in descending order, the end_time field is required.
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i64>,
    /// The order to list events in; either \"ASC\" or \"DESC\". Defaults to \"DESC\".
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<Order>,
    /// The start time in epoch milliseconds. If empty, returns events starting from the beginning of time.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
}

impl ComputeGetEvents {
    pub fn new(cluster_id: String) -> ComputeGetEvents {
        ComputeGetEvents {
            cluster_id,
            end_time: None,
            event_types: None,
            limit: None,
            offset: None,
            order: None,
            start_time: None,
        }
    }
}

/// The order to list events in; either \"ASC\" or \"DESC\". Defaults to \"DESC\".
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Order {
    #[serde(rename = "DESC")]
    Desc,
    #[serde(rename = "ASC")]
    Asc,
}

impl Default for Order {
    fn default() -> Order {
        Self::Desc
    }
}

