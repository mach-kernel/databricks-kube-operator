use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeClusterEvent {
    /// <needs content added>
    #[serde(rename = "cluster_id")]
    pub cluster_id: String,
    /// <needs content added>
    #[serde(rename = "data_plane_event_details", skip_serializing_if = "Option::is_none")]
    pub data_plane_event_details: Option<Box<crate::models::ComputeDataPlaneEventDetails>>,
    /// <needs content added>
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Box<crate::models::ComputeEventDetails>>,
    /// The timestamp when the event occurred, stored as the number of milliseconds since the Unix epoch. If not provided, this will be assigned by the Timeline service.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<crate::models::ComputeEventType>,
}

impl ComputeClusterEvent {
    pub fn new(cluster_id: String) -> ComputeClusterEvent {
        ComputeClusterEvent {
            cluster_id,
            data_plane_event_details: None,
            details: None,
            timestamp: None,
            r#type: None,
        }
    }
}


