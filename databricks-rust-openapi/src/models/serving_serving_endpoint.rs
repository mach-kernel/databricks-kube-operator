use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServingServingEndpoint {
    /// The config that is currently being served by the endpoint.
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<Box<crate::models::ServingEndpointCoreConfigSummary>>,
    /// The timestamp when the endpoint was created in Unix time.
    #[serde(rename = "creation_timestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<i64>,
    /// The email of the user who created the serving endpoint.
    #[serde(rename = "creator", skip_serializing_if = "Option::is_none")]
    pub creator: Option<String>,
    /// System-generated ID of the endpoint. This is used to refer to the endpoint in the Permissions API
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The timestamp when the endpoint was last updated by a user in Unix time.
    #[serde(rename = "last_updated_timestamp", skip_serializing_if = "Option::is_none")]
    pub last_updated_timestamp: Option<i64>,
    /// The name of the serving endpoint.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Information corresponding to the state of the serving endpoint.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<crate::models::ServingEndpointState>>,
}

impl ServingServingEndpoint {
    pub fn new() -> ServingServingEndpoint {
        ServingServingEndpoint {
            config: None,
            creation_timestamp: None,
            creator: None,
            id: None,
            last_updated_timestamp: None,
            name: None,
            state: None,
        }
    }
}


