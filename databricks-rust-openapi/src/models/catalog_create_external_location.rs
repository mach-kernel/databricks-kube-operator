use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogCreateExternalLocation {
    /// The AWS access point to use when accesing s3 for this external location.
    #[serde(rename = "access_point", skip_serializing_if = "Option::is_none")]
    pub access_point: Option<String>,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Name of the storage credential used with this location.
    #[serde(rename = "credential_name")]
    pub credential_name: String,
    #[serde(rename = "encryption_details", skip_serializing_if = "Option::is_none")]
    pub encryption_details: Option<Box<crate::models::CatalogEncryptionDetails>>,
    /// Name of the external location.
    #[serde(rename = "name")]
    pub name: String,
    /// Indicates whether the external location is read-only.
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// Skips validation of the storage credential associated with the external location.
    #[serde(rename = "skip_validation", skip_serializing_if = "Option::is_none")]
    pub skip_validation: Option<bool>,
    /// Path URL of the external location.
    #[serde(rename = "url")]
    pub url: String,
}

impl CatalogCreateExternalLocation {
    pub fn new(credential_name: String, name: String, url: String) -> CatalogCreateExternalLocation {
        CatalogCreateExternalLocation {
            access_point: None,
            comment: None,
            credential_name,
            encryption_details: None,
            name,
            read_only: None,
            skip_validation: None,
            url,
        }
    }
}


