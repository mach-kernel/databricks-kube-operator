use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SqlQueryMetrics : Metrics about query execution.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlQueryMetrics {
    /// Time spent executing the query, in milliseconds.
    #[serde(rename = "execution_time_ms", skip_serializing_if = "Option::is_none")]
    pub execution_time_ms: Option<i32>,
    /// Reserved for internal use.
    #[serde(rename = "query_execution_time_ms", skip_serializing_if = "Option::is_none")]
    pub query_execution_time_ms: Option<i32>,
    /// Total execution time for all individual Photon query engine tasks in the query, in milliseconds.
    #[serde(rename = "photon_total_time_ms", skip_serializing_if = "Option::is_none")]
    pub photon_total_time_ms: Option<i32>,
    /// Total number of files from all tables not read due to pruning
    #[serde(rename = "pruned_files_count", skip_serializing_if = "Option::is_none")]
    pub pruned_files_count: Option<i32>,
    /// Size of persistent data read from cloud object storage on your cloud tenant, in bytes.
    #[serde(rename = "read_remote_bytes", skip_serializing_if = "Option::is_none")]
    pub read_remote_bytes: Option<i32>,
    #[serde(rename = "planning_phases", skip_serializing_if = "Option::is_none")]
    pub planning_phases: Option<Vec<serde_json::Value>>,
    /// Timestamp of when the query was enqueued waiting while the warehouse was at max load. This field is optional and will not appear if the query skipped the overloading queue.
    #[serde(rename = "overloading_queue_start_timestamp", skip_serializing_if = "Option::is_none")]
    pub overloading_queue_start_timestamp: Option<i32>,
    /// Number of files read after pruning.
    #[serde(rename = "read_files_count", skip_serializing_if = "Option::is_none")]
    pub read_files_count: Option<i32>,
    /// Size pf persistent data written to cloud object storage in your cloud tenant, in bytes.
    #[serde(rename = "write_remote_bytes", skip_serializing_if = "Option::is_none")]
    pub write_remote_bytes: Option<i32>,
    /// Reserved for internal use.
    #[serde(rename = "metadata_time_ms", skip_serializing_if = "Option::is_none")]
    pub metadata_time_ms: Option<i32>,
    /// true if the query result was fetched from cache, false otherwise.
    #[serde(rename = "result_from_cache", skip_serializing_if = "Option::is_none")]
    pub result_from_cache: Option<bool>,
    /// Time spent fetching the query results after the execution finished, in milliseconds.
    #[serde(rename = "result_fetch_time_ms", skip_serializing_if = "Option::is_none")]
    pub result_fetch_time_ms: Option<i32>,
    /// Sum of execution time for all of the query’s tasks, in milliseconds.
    #[serde(rename = "task_total_time_ms", skip_serializing_if = "Option::is_none")]
    pub task_total_time_ms: Option<i32>,
    /// Total number of rows returned by the query.
    #[serde(rename = "rows_produced_count", skip_serializing_if = "Option::is_none")]
    pub rows_produced_count: Option<i32>,
    /// Total execution time of the query from the client’s point of view, in milliseconds.
    #[serde(rename = "total_time_ms", skip_serializing_if = "Option::is_none")]
    pub total_time_ms: Option<i32>,
    /// Size of data temporarily written to disk while executing the query, in bytes.
    #[serde(rename = "spill_to_disk_bytes", skip_serializing_if = "Option::is_none")]
    pub spill_to_disk_bytes: Option<i32>,
    /// Timestamp of when the query was enqueued waiting for a cluster to be provisioned for the warehouse. This field is optional and will not appear if the query skipped the provisioning queue.
    #[serde(rename = "provisioning_queue_start_timestamp", skip_serializing_if = "Option::is_none")]
    pub provisioning_queue_start_timestamp: Option<i32>,
    /// Total number of bytes in all tables not read due to pruning
    #[serde(rename = "pruned_bytes", skip_serializing_if = "Option::is_none")]
    pub pruned_bytes: Option<i32>,
    /// Size of persistent data read from the cache, in bytes.
    #[serde(rename = "read_cache_bytes", skip_serializing_if = "Option::is_none")]
    pub read_cache_bytes: Option<i32>,
    /// Reserved for internal use.
    #[serde(rename = "planning_time_ms", skip_serializing_if = "Option::is_none")]
    pub planning_time_ms: Option<i32>,
    /// Total amount of data sent over the network between executor nodes during shuffle, in bytes.
    #[serde(rename = "network_sent_bytes", skip_serializing_if = "Option::is_none")]
    pub network_sent_bytes: Option<i32>,
    /// Total number of rows read by the query.
    #[serde(rename = "rows_read_count", skip_serializing_if = "Option::is_none")]
    pub rows_read_count: Option<i32>,
    /// Total size of data read by the query, in bytes.
    #[serde(rename = "read_bytes", skip_serializing_if = "Option::is_none")]
    pub read_bytes: Option<i32>,
    /// Timestamp of when the underlying compute started compilation of the query.
    #[serde(rename = "query_compilation_start_timestamp", skip_serializing_if = "Option::is_none")]
    pub query_compilation_start_timestamp: Option<i32>,
    /// Time spent loading metadata and optimizing the query, in milliseconds.
    #[serde(rename = "compilation_time_ms", skip_serializing_if = "Option::is_none")]
    pub compilation_time_ms: Option<i32>,
    /// Number of partitions read after pruning.
    #[serde(rename = "read_partitions_count", skip_serializing_if = "Option::is_none")]
    pub read_partitions_count: Option<i32>,
}

impl SqlQueryMetrics {
    /// Metrics about query execution.
    pub fn new() -> SqlQueryMetrics {
        SqlQueryMetrics {
            execution_time_ms: None,
            query_execution_time_ms: None,
            photon_total_time_ms: None,
            pruned_files_count: None,
            read_remote_bytes: None,
            planning_phases: None,
            overloading_queue_start_timestamp: None,
            read_files_count: None,
            write_remote_bytes: None,
            metadata_time_ms: None,
            result_from_cache: None,
            result_fetch_time_ms: None,
            task_total_time_ms: None,
            rows_produced_count: None,
            total_time_ms: None,
            spill_to_disk_bytes: None,
            provisioning_queue_start_timestamp: None,
            pruned_bytes: None,
            read_cache_bytes: None,
            planning_time_ms: None,
            network_sent_bytes: None,
            rows_read_count: None,
            read_bytes: None,
            query_compilation_start_timestamp: None,
            compilation_time_ms: None,
            read_partitions_count: None,
        }
    }
}


