use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SqlResultManifest : The result manifest provides schema and metadata for the result set.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlResultManifest {
    #[serde(rename = "chunks", skip_serializing_if = "Option::is_none")]
    pub chunks: Option<Vec<crate::models::SqlChunkInfo>>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<crate::models::SqlFormat>,
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<Box<crate::models::SqlResultSchema>>,
    /// Total number of bytes in the result set.
    #[serde(rename = "total_byte_count", skip_serializing_if = "Option::is_none")]
    pub total_byte_count: Option<i64>,
    /// Total number of chunks that the result set has been divided into.
    #[serde(rename = "total_chunk_count", skip_serializing_if = "Option::is_none")]
    pub total_chunk_count: Option<i32>,
    /// Total number of rows in the result set.
    #[serde(rename = "total_row_count", skip_serializing_if = "Option::is_none")]
    pub total_row_count: Option<i64>,
}

impl SqlResultManifest {
    /// The result manifest provides schema and metadata for the result set.
    pub fn new() -> SqlResultManifest {
        SqlResultManifest {
            chunks: None,
            format: None,
            schema: None,
            total_byte_count: None,
            total_chunk_count: None,
            total_row_count: None,
        }
    }
}


