use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobsSqlDashboardWidgetOutput {
    /// Time (in epoch milliseconds) when execution of the SQL widget ends.
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    /// The information about the error when execution fails.
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<Box<crate::models::JobsSqlOutputError>>,
    /// The link to find the output results.
    #[serde(rename = "output_link", skip_serializing_if = "Option::is_none")]
    pub output_link: Option<String>,
    /// Time (in epoch milliseconds) when execution of the SQL widget starts.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    /// The execution status of the SQL widget.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The canonical identifier of the SQL widget.
    #[serde(rename = "widget_id", skip_serializing_if = "Option::is_none")]
    pub widget_id: Option<String>,
    /// The title of the SQL widget.
    #[serde(rename = "widget_title", skip_serializing_if = "Option::is_none")]
    pub widget_title: Option<String>,
}

impl JobsSqlDashboardWidgetOutput {
    pub fn new() -> JobsSqlDashboardWidgetOutput {
        JobsSqlDashboardWidgetOutput {
            end_time: None,
            error: None,
            output_link: None,
            start_time: None,
            status: None,
            widget_id: None,
            widget_title: None,
        }
    }
}

/// The execution status of the SQL widget.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "SUCCESS")]
    Success,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "CANCELLED")]
    Cancelled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

