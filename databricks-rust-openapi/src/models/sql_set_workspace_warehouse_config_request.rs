use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlSetWorkspaceWarehouseConfigRequest {
    #[serde(rename = "data_access_config", skip_serializing_if = "Option::is_none")]
    pub data_access_config: Option<Vec<crate::models::SqlEndpointConfPair>>,
    /// Security policy for warehouses
    #[serde(rename = "security_policy", skip_serializing_if = "Option::is_none")]
    pub security_policy: Option<SecurityPolicy>,
    /// Deprecated: Use sql_configuration_parameters
    #[serde(rename = "global_param", skip_serializing_if = "Option::is_none")]
    pub global_param: Option<Box<crate::models::SqlRepeatedEndpointConfPairs>>,
    #[serde(rename = "enabled_warehouse_types", skip_serializing_if = "Option::is_none")]
    pub enabled_warehouse_types: Option<Vec<crate::models::SqlWarehouseTypePair>>,
    /// AWS Only: Instance profile used to pass IAM role to the cluster
    #[serde(rename = "instance_profile_arn", skip_serializing_if = "Option::is_none")]
    pub instance_profile_arn: Option<String>,
    /// GCP only: Google Service Account used to pass to cluster to access Google Cloud Storage
    #[serde(rename = "google_service_account", skip_serializing_if = "Option::is_none")]
    pub google_service_account: Option<String>,
    /// SQL configuration parameters
    #[serde(rename = "sql_configuration_parameters", skip_serializing_if = "Option::is_none")]
    pub sql_configuration_parameters: Option<Box<crate::models::SqlRepeatedEndpointConfPairs>>,
    /// Deprecated: Use sql_configuration_parameters
    #[serde(rename = "config_param", skip_serializing_if = "Option::is_none")]
    pub config_param: Option<Box<crate::models::SqlRepeatedEndpointConfPairs>>,
    /// Optional: Channel selection details
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<Box<crate::models::SqlChannel>>,
}

impl SqlSetWorkspaceWarehouseConfigRequest {
    pub fn new() -> SqlSetWorkspaceWarehouseConfigRequest {
        SqlSetWorkspaceWarehouseConfigRequest {
            data_access_config: None,
            security_policy: None,
            global_param: None,
            enabled_warehouse_types: None,
            instance_profile_arn: None,
            google_service_account: None,
            sql_configuration_parameters: None,
            config_param: None,
            channel: None,
        }
    }
}

/// Security policy for warehouses
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecurityPolicy {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "DATA_ACCESS_CONTROL")]
    DataAccessControl,
    #[serde(rename = "PASSTHROUGH")]
    Passthrough,
}

impl Default for SecurityPolicy {
    fn default() -> SecurityPolicy {
        Self::None
    }
}

