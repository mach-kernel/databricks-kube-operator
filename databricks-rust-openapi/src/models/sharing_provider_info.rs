use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharingProviderInfo {
    /// Username of Provider owner.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Cloud vendor of the provider's UC metastore. This field is only present when the __authentication_type__ is **DATABRICKS**.
    #[serde(rename = "cloud", skip_serializing_if = "Option::is_none")]
    pub cloud: Option<String>,
    /// The global UC metastore id of the data provider. This field is only present when the __authentication_type__ is **DATABRICKS**. The identifier is of format <cloud>:<region>:<metastore-uuid>.
    #[serde(rename = "data_provider_global_metastore_id", skip_serializing_if = "Option::is_none")]
    pub data_provider_global_metastore_id: Option<String>,
    /// UUID of the provider's UC metastore. This field is only present when the __authentication_type__ is **DATABRICKS**.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// Username of Provider creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// The name of the Provider.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "authentication_type", skip_serializing_if = "Option::is_none")]
    pub authentication_type: Option<crate::models::SharingAuthenticationType>,
    /// Time at which this Provider was created, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// Cloud region of the provider's UC metastore. This field is only present when the __authentication_type__ is **DATABRICKS**.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The recipient profile. This field is only present when the authentication_type is `TOKEN`.
    #[serde(rename = "recipient_profile", skip_serializing_if = "Option::is_none")]
    pub recipient_profile: Option<Box<crate::models::SharingRecipientProfile>>,
    /// Time at which this Provider was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// Description about the provider.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Username of user who last modified Share.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// This field is only present when the authentication_type is `TOKEN` or not provided.
    #[serde(rename = "recipient_profile_str", skip_serializing_if = "Option::is_none")]
    pub recipient_profile_str: Option<String>,
}

impl SharingProviderInfo {
    pub fn new() -> SharingProviderInfo {
        SharingProviderInfo {
            owner: None,
            cloud: None,
            data_provider_global_metastore_id: None,
            metastore_id: None,
            created_by: None,
            name: None,
            authentication_type: None,
            updated_at: None,
            region: None,
            recipient_profile: None,
            created_at: None,
            comment: None,
            updated_by: None,
            recipient_profile_str: None,
        }
    }
}


