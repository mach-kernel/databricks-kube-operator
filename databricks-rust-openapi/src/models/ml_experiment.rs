use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlExperiment {
    /// Location where artifacts for the experiment are stored.
    #[serde(rename = "artifact_location", skip_serializing_if = "Option::is_none")]
    pub artifact_location: Option<String>,
    /// Creation time
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<i64>,
    /// Unique identifier for the experiment.
    #[serde(rename = "experiment_id", skip_serializing_if = "Option::is_none")]
    pub experiment_id: Option<String>,
    /// Last update time
    #[serde(rename = "last_update_time", skip_serializing_if = "Option::is_none")]
    pub last_update_time: Option<i64>,
    /// Current life cycle stage of the experiment: \"active\" or \"deleted\". Deleted experiments are not returned by APIs.
    #[serde(rename = "lifecycle_stage", skip_serializing_if = "Option::is_none")]
    pub lifecycle_stage: Option<String>,
    /// Human readable name that identifies the experiment.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::MlExperimentTag>>,
}

impl MlExperiment {
    pub fn new() -> MlExperiment {
        MlExperiment {
            artifact_location: None,
            creation_time: None,
            experiment_id: None,
            last_update_time: None,
            lifecycle_stage: None,
            name: None,
            tags: None,
        }
    }
}


