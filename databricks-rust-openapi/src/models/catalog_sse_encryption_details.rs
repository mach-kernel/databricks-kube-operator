use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CatalogSseEncryptionDetails : Server-Side Encryption properties for clients communicating with AWS s3.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogSseEncryptionDetails {
    /// The type of key encryption to use (affects headers from s3 client).
    #[serde(rename = "algorithm", skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<Algorithm>,
    /// When algorithm is **AWS_SSE_KMS** this field specifies the ARN of the SSE key to use.
    #[serde(rename = "aws_kms_key_arn", skip_serializing_if = "Option::is_none")]
    pub aws_kms_key_arn: Option<String>,
}

impl CatalogSseEncryptionDetails {
    /// Server-Side Encryption properties for clients communicating with AWS s3.
    pub fn new() -> CatalogSseEncryptionDetails {
        CatalogSseEncryptionDetails {
            algorithm: None,
            aws_kms_key_arn: None,
        }
    }
}

/// The type of key encryption to use (affects headers from s3 client).
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Algorithm {
    #[serde(rename = "AWS_SSE_S3")]
    S3,
    #[serde(rename = "AWS_SSE_KMS")]
    Kms,
}

impl Default for Algorithm {
    fn default() -> Algorithm {
        Self::S3
    }
}

