use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeNodeType {
    #[serde(rename = "support_cluster_tags", skip_serializing_if = "Option::is_none")]
    pub support_cluster_tags: Option<bool>,
    #[serde(rename = "support_ebs_volumes", skip_serializing_if = "Option::is_none")]
    pub support_ebs_volumes: Option<bool>,
    /// An identifier for the type of hardware that this node runs on, Eg., \"r3.2xlarge\" in AWS.
    #[serde(rename = "instance_type_id")]
    pub instance_type_id: String,
    /// Memory (in MB) available for this node type.
    #[serde(rename = "memory_mb")]
    pub memory_mb: i32,
    #[serde(rename = "is_graviton", skip_serializing_if = "Option::is_none")]
    pub is_graviton: Option<bool>,
    #[serde(rename = "is_io_cache_enabled", skip_serializing_if = "Option::is_none")]
    pub is_io_cache_enabled: Option<bool>,
    #[serde(rename = "node_instance_type", skip_serializing_if = "Option::is_none")]
    pub node_instance_type: Option<Box<crate::models::ComputeNodeInstanceType>>,
    #[serde(rename = "node_info", skip_serializing_if = "Option::is_none")]
    pub node_info: Option<Box<crate::models::ComputeCloudProviderNodeInfo>>,
    /// Whether the node type is deprecated. Non-deprecated node types offer greater performance.
    #[serde(rename = "is_deprecated", skip_serializing_if = "Option::is_none")]
    pub is_deprecated: Option<bool>,
    /// AWS specific, whether this instance supports encryption in transit, used for hipaa and pci workloads.
    #[serde(rename = "is_encrypted_in_transit", skip_serializing_if = "Option::is_none")]
    pub is_encrypted_in_transit: Option<bool>,
    #[serde(rename = "is_hidden", skip_serializing_if = "Option::is_none")]
    pub is_hidden: Option<bool>,
    #[serde(rename = "support_port_forwarding", skip_serializing_if = "Option::is_none")]
    pub support_port_forwarding: Option<bool>,
    #[serde(rename = "photon_driver_capable", skip_serializing_if = "Option::is_none")]
    pub photon_driver_capable: Option<bool>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// Unique identifier for this node type.
    #[serde(rename = "node_type_id")]
    pub node_type_id: String,
    /// Number of CPU cores available for this node type. Note that this can be fractional, Eg., 2.5 cores, if the the number of cores on a machine instance is not divisible by the number of Spark nodes on that machine.
    #[serde(rename = "num_cores")]
    pub num_cores: f64,
    /// A string description associated with this node type, Eg., \"r3.xlarge\".
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "num_gpus", skip_serializing_if = "Option::is_none")]
    pub num_gpus: Option<i32>,
    #[serde(rename = "display_order", skip_serializing_if = "Option::is_none")]
    pub display_order: Option<i32>,
    #[serde(rename = "photon_worker_capable", skip_serializing_if = "Option::is_none")]
    pub photon_worker_capable: Option<bool>,
}

impl ComputeNodeType {
    pub fn new(instance_type_id: String, memory_mb: i32, node_type_id: String, num_cores: f64, description: String) -> ComputeNodeType {
        ComputeNodeType {
            support_cluster_tags: None,
            support_ebs_volumes: None,
            instance_type_id,
            memory_mb,
            is_graviton: None,
            is_io_cache_enabled: None,
            node_instance_type: None,
            node_info: None,
            is_deprecated: None,
            is_encrypted_in_transit: None,
            is_hidden: None,
            support_port_forwarding: None,
            photon_driver_capable: None,
            category: None,
            node_type_id,
            num_cores,
            description,
            num_gpus: None,
            display_order: None,
            photon_worker_capable: None,
        }
    }
}


