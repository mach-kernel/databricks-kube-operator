use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ComputeEventType {
    #[serde(rename = "CREATING")]
    Creating,
    #[serde(rename = "STARTING")]
    Starting,
    #[serde(rename = "RESTARTING")]
    Restarting,
    #[serde(rename = "TERMINATING")]
    Terminating,
    #[serde(rename = "EDITED")]
    Edited,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "RESIZING")]
    Resizing,
    #[serde(rename = "NODES_LOST")]
    NodesLost,
    #[serde(rename = "UPSIZE_COMPLETED")]
    UpsizeCompleted,
    #[serde(rename = "INIT_SCRIPTS_STARTED")]
    InitScriptsStarted,
    #[serde(rename = "INIT_SCRIPTS_FINISHED")]
    InitScriptsFinished,
    #[serde(rename = "DID_NOT_EXPAND_DISK")]
    DidNotExpandDisk,
    #[serde(rename = "EXPANDED_DISK")]
    ExpandedDisk,
    #[serde(rename = "FAILED_TO_EXPAND_DISK")]
    FailedToExpandDisk,
    #[serde(rename = "DRIVER_HEALTHY")]
    DriverHealthy,
    #[serde(rename = "DRIVER_NOT_RESPONDING")]
    DriverNotResponding,
    #[serde(rename = "DRIVER_UNAVAILABLE")]
    DriverUnavailable,
    #[serde(rename = "SPARK_EXCEPTION")]
    SparkException,
    #[serde(rename = "METASTORE_DOWN")]
    MetastoreDown,
    #[serde(rename = "DBFS_DOWN")]
    DbfsDown,
    #[serde(rename = "AUTOSCALING_STATS_REPORT")]
    AutoscalingStatsReport,
    #[serde(rename = "NODE_BLACKLISTED")]
    NodeBlacklisted,
    #[serde(rename = "PINNED")]
    Pinned,
    #[serde(rename = "UNPINNED")]
    Unpinned,
    #[serde(rename = "NODE_EXCLUDED_DECOMMISSIONED")]
    NodeExcludedDecommissioned,

}

impl ToString for ComputeEventType {
    fn to_string(&self) -> String {
        match self {
            Self::Creating => String::from("CREATING"),
            Self::Starting => String::from("STARTING"),
            Self::Restarting => String::from("RESTARTING"),
            Self::Terminating => String::from("TERMINATING"),
            Self::Edited => String::from("EDITED"),
            Self::Running => String::from("RUNNING"),
            Self::Resizing => String::from("RESIZING"),
            Self::NodesLost => String::from("NODES_LOST"),
            Self::UpsizeCompleted => String::from("UPSIZE_COMPLETED"),
            Self::InitScriptsStarted => String::from("INIT_SCRIPTS_STARTED"),
            Self::InitScriptsFinished => String::from("INIT_SCRIPTS_FINISHED"),
            Self::DidNotExpandDisk => String::from("DID_NOT_EXPAND_DISK"),
            Self::ExpandedDisk => String::from("EXPANDED_DISK"),
            Self::FailedToExpandDisk => String::from("FAILED_TO_EXPAND_DISK"),
            Self::DriverHealthy => String::from("DRIVER_HEALTHY"),
            Self::DriverNotResponding => String::from("DRIVER_NOT_RESPONDING"),
            Self::DriverUnavailable => String::from("DRIVER_UNAVAILABLE"),
            Self::SparkException => String::from("SPARK_EXCEPTION"),
            Self::MetastoreDown => String::from("METASTORE_DOWN"),
            Self::DbfsDown => String::from("DBFS_DOWN"),
            Self::AutoscalingStatsReport => String::from("AUTOSCALING_STATS_REPORT"),
            Self::NodeBlacklisted => String::from("NODE_BLACKLISTED"),
            Self::Pinned => String::from("PINNED"),
            Self::Unpinned => String::from("UNPINNED"),
            Self::NodeExcludedDecommissioned => String::from("NODE_EXCLUDED_DECOMMISSIONED"),
        }
    }
}

impl Default for ComputeEventType {
    fn default() -> ComputeEventType {
        Self::Creating
    }
}




