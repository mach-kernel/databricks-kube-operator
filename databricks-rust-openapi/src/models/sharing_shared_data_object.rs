use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharingSharedDataObject {
    /// A user-provided new name for the data object within the share. If this new name is not provided, the object's original name will be used as the `shared_as` name. The `shared_as` name must be unique within a share. For tables, the new name must follow the format of `<schema>.<table>`.
    #[serde(rename = "shared_as", skip_serializing_if = "Option::is_none")]
    pub shared_as: Option<String>,
    /// The time when this data object is added to the share, in epoch milliseconds.
    #[serde(rename = "added_at", skip_serializing_if = "Option::is_none")]
    pub added_at: Option<i64>,
    /// Whether to enable or disable sharing of data history. If not specified, the default is **DISABLED**.
    #[serde(rename = "history_data_sharing_status", skip_serializing_if = "Option::is_none")]
    pub history_data_sharing_status: Option<HistoryDataSharingStatus>,
    /// The type of the data object.
    #[serde(rename = "data_object_type", skip_serializing_if = "Option::is_none")]
    pub data_object_type: Option<String>,
    /// The start version associated with the object. This allows data providers to control the lowest object version that is accessible by clients. If specified, clients can query snapshots or changes for versions >= start_version. If not specified, clients can only query starting from the version of the object at the time it was added to the share.  NOTE: The start_version should be <= the `current` version of the object. 
    #[serde(rename = "start_version", skip_serializing_if = "Option::is_none")]
    pub start_version: Option<i64>,
    /// Username of the sharer.
    #[serde(rename = "added_by", skip_serializing_if = "Option::is_none")]
    pub added_by: Option<String>,
    /// A fully qualified name that uniquely identifies a data object.  For example, a table's fully qualified name is in the format of `<catalog>.<schema>.<table>`. 
    #[serde(rename = "name")]
    pub name: String,
    /// One of: **ACTIVE**, **PERMISSION_DENIED**.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Whether to enable cdf or indicate if cdf is enabled on the shared object.
    #[serde(rename = "cdf_enabled", skip_serializing_if = "Option::is_none")]
    pub cdf_enabled: Option<bool>,
    /// A user-provided comment when adding the data object to the share. [Update:OPT]
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "partitions", skip_serializing_if = "Option::is_none")]
    pub partitions: Option<Vec<crate::models::SharingPartition>>,
}

impl SharingSharedDataObject {
    pub fn new(name: String) -> SharingSharedDataObject {
        SharingSharedDataObject {
            shared_as: None,
            added_at: None,
            history_data_sharing_status: None,
            data_object_type: None,
            start_version: None,
            added_by: None,
            name,
            status: None,
            cdf_enabled: None,
            comment: None,
            partitions: None,
        }
    }
}

/// Whether to enable or disable sharing of data history. If not specified, the default is **DISABLED**.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HistoryDataSharingStatus {
    #[serde(rename = "ENABLED")]
    Enabled,
    #[serde(rename = "DISABLED")]
    Disabled,
}

impl Default for HistoryDataSharingStatus {
    fn default() -> HistoryDataSharingStatus {
        Self::Enabled
    }
}
/// One of: **ACTIVE**, **PERMISSION_DENIED**.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "PERMISSION_DENIED")]
    PermissionDenied,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

