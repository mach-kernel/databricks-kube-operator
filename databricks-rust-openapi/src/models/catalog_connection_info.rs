use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogConnectionInfo {
    /// An object containing map of key-value properties attached to the connection. 
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// Username of current owner of the connection.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// URL of the remote data source, extracted from options.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Full name of connection.
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// Kind of connection securable.
    #[serde(rename = "securable_kind", skip_serializing_if = "Option::is_none")]
    pub securable_kind: Option<SecurableKind>,
    /// Unique identifier of parent metastore.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// Username of connection creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// If the connection is read only.
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(rename = "connection_type", skip_serializing_if = "Option::is_none")]
    pub connection_type: Option<crate::models::CatalogConnectionType>,
    /// Name of the connection.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Unique identifier of the Connection.
    #[serde(rename = "connection_id", skip_serializing_if = "Option::is_none")]
    pub connection_id: Option<String>,
    /// Time at which this connection was updated, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    #[serde(rename = "credential_type", skip_serializing_if = "Option::is_none")]
    pub credential_type: Option<crate::models::CatalogCredentialType>,
    /// Time at which this connection was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "securable_type", skip_serializing_if = "Option::is_none")]
    pub securable_type: Option<String>,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Username of user who last modified connection.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "options", default, skip_serializing_if = "Option::is_none")]
    pub options: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "provisioning_state", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<crate::models::CatalogProvisioningState>,
}

impl CatalogConnectionInfo {
    pub fn new() -> CatalogConnectionInfo {
        CatalogConnectionInfo {
            properties: None,
            owner: None,
            url: None,
            full_name: None,
            securable_kind: None,
            metastore_id: None,
            created_by: None,
            read_only: None,
            connection_type: None,
            name: None,
            connection_id: None,
            updated_at: None,
            credential_type: None,
            created_at: None,
            securable_type: None,
            comment: None,
            updated_by: None,
            options: None,
            provisioning_state: None,
        }
    }
}

/// Kind of connection securable.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecurableKind {
    #[serde(rename = "CONNECTION_BIGQUERY")]
    Bigquery,
    #[serde(rename = "CONNECTION_MYSQL")]
    Mysql,
    #[serde(rename = "CONNECTION_POSTGRESQL")]
    Postgresql,
    #[serde(rename = "CONNECTION_SNOWFLAKE")]
    Snowflake,
    #[serde(rename = "CONNECTION_REDSHIFT")]
    Redshift,
    #[serde(rename = "CONNECTION_SQLSERVER")]
    Sqlserver,
    #[serde(rename = "CONNECTION_SQLDW")]
    Sqldw,
    #[serde(rename = "CONNECTION_DATABRICKS")]
    Databricks,
    #[serde(rename = "CONNECTION_ONLINE_CATALOG")]
    OnlineCatalog,
}

impl Default for SecurableKind {
    fn default() -> SecurableKind {
        Self::Bigquery
    }
}

