use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogExternalLocationInfo {
    /// The owner of the external location.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Path URL of the external location.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Unique ID of the location's storage credential.
    #[serde(rename = "credential_id", skip_serializing_if = "Option::is_none")]
    pub credential_id: Option<String>,
    #[serde(rename = "encryption_details", skip_serializing_if = "Option::is_none")]
    pub encryption_details: Option<Box<crate::models::CatalogEncryptionDetails>>,
    /// Unique identifier of metastore hosting the external location.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// Username of external location creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Indicates whether the external location is read-only.
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// Name of the external location.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Time at which external location this was last modified, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// Name of the storage credential used with this location.
    #[serde(rename = "credential_name", skip_serializing_if = "Option::is_none")]
    pub credential_name: Option<String>,
    /// The AWS access point to use when accesing s3 for this external location.
    #[serde(rename = "access_point", skip_serializing_if = "Option::is_none")]
    pub access_point: Option<String>,
    /// Time at which this external location was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Username of user who last modified the external location.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
}

impl CatalogExternalLocationInfo {
    pub fn new() -> CatalogExternalLocationInfo {
        CatalogExternalLocationInfo {
            owner: None,
            url: None,
            credential_id: None,
            encryption_details: None,
            metastore_id: None,
            created_by: None,
            read_only: None,
            name: None,
            updated_at: None,
            credential_name: None,
            access_point: None,
            created_at: None,
            comment: None,
            updated_by: None,
        }
    }
}


