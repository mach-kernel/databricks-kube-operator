use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogCreateSchema {
    /// Name of parent catalog.
    #[serde(rename = "catalog_name")]
    pub catalog_name: String,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Name of schema, relative to parent catalog.
    #[serde(rename = "name")]
    pub name: String,
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// Storage root URL for managed tables within schema.
    #[serde(rename = "storage_root", skip_serializing_if = "Option::is_none")]
    pub storage_root: Option<String>,
}

impl CatalogCreateSchema {
    pub fn new(catalog_name: String, name: String) -> CatalogCreateSchema {
        CatalogCreateSchema {
            catalog_name,
            comment: None,
            name,
            properties: None,
            storage_root: None,
        }
    }
}


