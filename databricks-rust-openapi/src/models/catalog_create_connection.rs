use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogCreateConnection {
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "connection_type")]
    pub connection_type: crate::models::CatalogConnectionType,
    /// Name of the connection.
    #[serde(rename = "name")]
    pub name: String,
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "options", deserialize_with = "Option::deserialize")]
    pub options: Option<::std::collections::HashMap<String, String>>,
    /// Username of current owner of the connection.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// An object containing map of key-value properties attached to the connection. 
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// If the connection is read only.
    #[serde(rename = "read_only", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
}

impl CatalogCreateConnection {
    pub fn new(connection_type: crate::models::CatalogConnectionType, name: String, options: Option<::std::collections::HashMap<String, String>>) -> CatalogCreateConnection {
        CatalogCreateConnection {
            comment: None,
            connection_type,
            name,
            options,
            owner: None,
            properties: None,
            read_only: None,
        }
    }
}


