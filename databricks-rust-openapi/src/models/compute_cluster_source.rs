use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ComputeClusterSource : Determines whether the cluster was created by a user through the UI, created by the Databricks Jobs Scheduler, or through an API request. This is the same as cluster_creator, but read only.

/// Determines whether the cluster was created by a user through the UI, created by the Databricks Jobs Scheduler, or through an API request. This is the same as cluster_creator, but read only.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ComputeClusterSource {
    #[serde(rename = "UI")]
    Ui,
    #[serde(rename = "JOB")]
    Job,
    #[serde(rename = "API")]
    Api,
    #[serde(rename = "SQL")]
    Sql,
    #[serde(rename = "MODELS")]
    Models,
    #[serde(rename = "PIPELINE")]
    Pipeline,
    #[serde(rename = "PIPELINE_MAINTENANCE")]
    PipelineMaintenance,

}

impl ToString for ComputeClusterSource {
    fn to_string(&self) -> String {
        match self {
            Self::Ui => String::from("UI"),
            Self::Job => String::from("JOB"),
            Self::Api => String::from("API"),
            Self::Sql => String::from("SQL"),
            Self::Models => String::from("MODELS"),
            Self::Pipeline => String::from("PIPELINE"),
            Self::PipelineMaintenance => String::from("PIPELINE_MAINTENANCE"),
        }
    }
}

impl Default for ComputeClusterSource {
    fn default() -> ComputeClusterSource {
        Self::Ui
    }
}




