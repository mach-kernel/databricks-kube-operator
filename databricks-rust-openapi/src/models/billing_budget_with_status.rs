use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BillingBudgetWithStatus : Budget configuration with daily status.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BillingBudgetWithStatus {
    /// Optional end date of the budget.
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "budget_id", skip_serializing_if = "Option::is_none")]
    pub budget_id: Option<String>,
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<String>,
    #[serde(rename = "alerts", skip_serializing_if = "Option::is_none")]
    pub alerts: Option<Vec<crate::models::BillingBudgetAlert>>,
    #[serde(rename = "update_time", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// Human-readable name of the budget.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    ///  SQL-like filter expression with workspaceId, SKU and tag. Usage in your account that matches this expression will be counted in this budget.  Supported properties on left-hand side of comparison:  * `workspaceId` - the ID of the workspace  * `sku` - SKU of the cluster, Eg. `STANDARD_ALL_PURPOSE_COMPUTE`   * `tag.tagName`, `tag.'tag name'` - tag of the cluster   Supported comparison operators:  * `=` - equal   * `!=` - not equal   Supported logical operators: `AND`, `OR`.  Examples:  * `workspaceId=123 OR (sku='STANDARD_ALL_PURPOSE_COMPUTE' AND tag.'my tag'='my value')`  * `workspaceId!=456`  * `sku='STANDARD_ALL_PURPOSE_COMPUTE' OR sku='PREMIUM_ALL_PURPOSE_COMPUTE'`  * `tag.name1='value1' AND tag.name2='value2'`  
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    #[serde(rename = "status_daily", skip_serializing_if = "Option::is_none")]
    pub status_daily: Option<Vec<crate::models::BillingBudgetWithStatusStatusDailyInner>>,
    /// Start date of the budget period calculation.
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    ///  Period length in years, months, weeks and/or days.  Examples: `1 month`, `30 days`, `1 year, 2 months, 1 week, 2 days`  
    #[serde(rename = "period", skip_serializing_if = "Option::is_none")]
    pub period: Option<String>,
    /// Target amount of the budget per period in USD.
    #[serde(rename = "target_amount", skip_serializing_if = "Option::is_none")]
    pub target_amount: Option<String>,
}

impl BillingBudgetWithStatus {
    /// Budget configuration with daily status.
    pub fn new() -> BillingBudgetWithStatus {
        BillingBudgetWithStatus {
            end_date: None,
            budget_id: None,
            creation_time: None,
            alerts: None,
            update_time: None,
            name: None,
            filter: None,
            status_daily: None,
            start_date: None,
            period: None,
            target_amount: None,
        }
    }
}


