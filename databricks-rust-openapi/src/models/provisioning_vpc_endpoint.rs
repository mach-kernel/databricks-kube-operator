use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningVpcEndpoint {
    /// The AWS Account in which the VPC endpoint object exists.
    #[serde(rename = "aws_account_id", skip_serializing_if = "Option::is_none")]
    pub aws_account_id: Option<String>,
    /// The human-readable name of the storage configuration.
    #[serde(rename = "vpc_endpoint_name", skip_serializing_if = "Option::is_none")]
    pub vpc_endpoint_name: Option<String>,
    /// The ID of the Databricks [endpoint service](https://Docsaws.amazon.com/vpc/latest/privatelink/endpoint-service.html) that this VPC endpoint is connected to. For a list of endpoint service IDs for each supported AWS region, see the [Databricks PrivateLink documentation](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html).
    #[serde(rename = "aws_endpoint_service_id", skip_serializing_if = "Option::is_none")]
    pub aws_endpoint_service_id: Option<String>,
    #[serde(rename = "use_case", skip_serializing_if = "Option::is_none")]
    pub use_case: Option<crate::models::ProvisioningEndpointUseCase>,
    #[serde(rename = "gcp_vpc_endpoint_info", skip_serializing_if = "Option::is_none")]
    pub gcp_vpc_endpoint_info: Option<Box<crate::models::ProvisioningGcpVpcEndpointInfo>>,
    /// Databricks VPC endpoint ID. This is the Databricks-specific name of the VPC endpoint. Do not confuse this with the `aws_vpc_endpoint_id`, which is the ID within AWS of the VPC endpoint.
    #[serde(rename = "vpc_endpoint_id", skip_serializing_if = "Option::is_none")]
    pub vpc_endpoint_id: Option<String>,
    /// The ID of the VPC endpoint object in AWS.
    #[serde(rename = "aws_vpc_endpoint_id", skip_serializing_if = "Option::is_none")]
    pub aws_vpc_endpoint_id: Option<String>,
    /// The AWS region in which this VPC endpoint object exists.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The current state (such as `available` or `rejected`) of the VPC endpoint. Derived from AWS. For the full set of values, see [AWS DescribeVpcEndpoint documentation](https://Docsaws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html).
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The Databricks account ID that hosts the VPC endpoint configuration.
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
}

impl ProvisioningVpcEndpoint {
    pub fn new() -> ProvisioningVpcEndpoint {
        ProvisioningVpcEndpoint {
            aws_account_id: None,
            vpc_endpoint_name: None,
            aws_endpoint_service_id: None,
            use_case: None,
            gcp_vpc_endpoint_info: None,
            vpc_endpoint_id: None,
            aws_vpc_endpoint_id: None,
            region: None,
            state: None,
            account_id: None,
        }
    }
}


