use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SqlTimeoutAction : When in synchronous mode with `wait_timeout > 0s` it determines the action taken when the timeout is reached:  `CONTINUE` → the statement execution continues asynchronously and the call returns a statement ID immediately.  `CANCEL` → the statement execution is canceled and the call returns immediately with a `CANCELED` state. 

/// When in synchronous mode with `wait_timeout > 0s` it determines the action taken when the timeout is reached:  `CONTINUE` → the statement execution continues asynchronously and the call returns a statement ID immediately.  `CANCEL` → the statement execution is canceled and the call returns immediately with a `CANCELED` state. 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SqlTimeoutAction {
    #[serde(rename = "CONTINUE")]
    Continue,
    #[serde(rename = "CANCEL")]
    Cancel,

}

impl ToString for SqlTimeoutAction {
    fn to_string(&self) -> String {
        match self {
            Self::Continue => String::from("CONTINUE"),
            Self::Cancel => String::from("CANCEL"),
        }
    }
}

impl Default for SqlTimeoutAction {
    fn default() -> SqlTimeoutAction {
        Self::Continue
    }
}




