use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelinesUpdateInfo {
    /// The ID of the pipeline.
    #[serde(rename = "pipeline_id", skip_serializing_if = "Option::is_none")]
    pub pipeline_id: Option<String>,
    /// The pipeline configuration with system defaults applied where unspecified by the user. Not returned by ListUpdates.
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<Box<crate::models::PipelinesPipelineSpec>>,
    #[serde(rename = "refresh_selection", skip_serializing_if = "Option::is_none")]
    pub refresh_selection: Option<Vec<String>>,
    /// The time when this update was created.
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<i64>,
    /// What triggered this update.
    #[serde(rename = "cause", skip_serializing_if = "Option::is_none")]
    pub cause: Option<Cause>,
    #[serde(rename = "full_refresh_selection", skip_serializing_if = "Option::is_none")]
    pub full_refresh_selection: Option<Vec<String>>,
    /// If true, this update will reset all tables before running.
    #[serde(rename = "full_refresh", skip_serializing_if = "Option::is_none")]
    pub full_refresh: Option<bool>,
    /// The ID of the cluster that the update is running on.
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<String>,
    /// The update state.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The ID of this update.
    #[serde(rename = "update_id", skip_serializing_if = "Option::is_none")]
    pub update_id: Option<String>,
}

impl PipelinesUpdateInfo {
    pub fn new() -> PipelinesUpdateInfo {
        PipelinesUpdateInfo {
            pipeline_id: None,
            config: None,
            refresh_selection: None,
            creation_time: None,
            cause: None,
            full_refresh_selection: None,
            full_refresh: None,
            cluster_id: None,
            state: None,
            update_id: None,
        }
    }
}

/// What triggered this update.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cause {
    #[serde(rename = "API_CALL")]
    ApiCall,
    #[serde(rename = "RETRY_ON_FAILURE")]
    RetryOnFailure,
    #[serde(rename = "SERVICE_UPGRADE")]
    ServiceUpgrade,
    #[serde(rename = "SCHEMA_CHANGE")]
    SchemaChange,
    #[serde(rename = "JOB_TASK")]
    JobTask,
    #[serde(rename = "USER_ACTION")]
    UserAction,
}

impl Default for Cause {
    fn default() -> Cause {
        Self::ApiCall
    }
}
/// The update state.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "CREATED")]
    Created,
    #[serde(rename = "WAITING_FOR_RESOURCES")]
    WaitingForResources,
    #[serde(rename = "INITIALIZING")]
    Initializing,
    #[serde(rename = "RESETTING")]
    Resetting,
    #[serde(rename = "SETTING_UP_TABLES")]
    SettingUpTables,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "STOPPING")]
    Stopping,
    #[serde(rename = "COMPLETED")]
    Completed,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "CANCELED")]
    Canceled,
}

impl Default for State {
    fn default() -> State {
        Self::Queued
    }
}

