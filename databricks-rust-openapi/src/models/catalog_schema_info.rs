use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogSchemaInfo {
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// Username of current owner of schema.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Name of parent catalog.
    #[serde(rename = "catalog_name", skip_serializing_if = "Option::is_none")]
    pub catalog_name: Option<String>,
    /// Full name of schema, in form of __catalog_name__.__schema_name__.
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "effective_predictive_optimization_flag", skip_serializing_if = "Option::is_none")]
    pub effective_predictive_optimization_flag: Option<Box<crate::models::CatalogEffectivePredictiveOptimizationFlag>>,
    /// Unique identifier of parent metastore.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// Username of schema creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Name of schema, relative to parent catalog.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Time at which this schema was created, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    #[serde(rename = "enable_predictive_optimization", skip_serializing_if = "Option::is_none")]
    pub enable_predictive_optimization: Option<crate::models::CatalogEnablePredictiveOptimization>,
    /// Storage root URL for managed tables within schema.
    #[serde(rename = "storage_root", skip_serializing_if = "Option::is_none")]
    pub storage_root: Option<String>,
    /// The type of the parent catalog.
    #[serde(rename = "catalog_type", skip_serializing_if = "Option::is_none")]
    pub catalog_type: Option<String>,
    /// Time at which this schema was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Username of user who last modified schema.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// Storage location for managed tables within schema.
    #[serde(rename = "storage_location", skip_serializing_if = "Option::is_none")]
    pub storage_location: Option<String>,
}

impl CatalogSchemaInfo {
    pub fn new() -> CatalogSchemaInfo {
        CatalogSchemaInfo {
            properties: None,
            owner: None,
            catalog_name: None,
            full_name: None,
            effective_predictive_optimization_flag: None,
            metastore_id: None,
            created_by: None,
            name: None,
            updated_at: None,
            enable_predictive_optimization: None,
            storage_root: None,
            catalog_type: None,
            created_at: None,
            comment: None,
            updated_by: None,
            storage_location: None,
        }
    }
}


