use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlExecuteStatementRequest {
    /// Warehouse upon which to execute a statement. See also [What are SQL warehouses?](/sql/admin/warehouse-Typehtml) 
    #[serde(rename = "warehouse_id", skip_serializing_if = "Option::is_none")]
    pub warehouse_id: Option<String>,
    /// Sets default schema for statement execution, similar to [`USE SCHEMA`](https://Docsdatabricks.com/sql/language-manual/sql-ref-syntax-ddl-use-schema.html) in SQL. 
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    #[serde(rename = "disposition", skip_serializing_if = "Option::is_none")]
    pub disposition: Option<crate::models::SqlDisposition>,
    /// The time in seconds the API service will wait for the statement's result set as `Ns`, where `N` can be set to 0 or to a value between 5 and 50. When set to '0s' the statement will execute in asynchronous mode.\" 
    #[serde(rename = "wait_timeout", skip_serializing_if = "Option::is_none")]
    pub wait_timeout: Option<String>,
    /// SQL statement to execute
    #[serde(rename = "statement", skip_serializing_if = "Option::is_none")]
    pub statement: Option<String>,
    /// Applies the given byte limit to the statement's result size. Byte counts are based on internal representations and may not match measurable sizes in the requested `format`. 
    #[serde(rename = "byte_limit", skip_serializing_if = "Option::is_none")]
    pub byte_limit: Option<i64>,
    /// Sets default catalog for statement execution, similar to [`USE CATALOG`](https://Docsdatabricks.com/sql/language-manual/sql-ref-syntax-ddl-use-catalog.html) in SQL. 
    #[serde(rename = "catalog", skip_serializing_if = "Option::is_none")]
    pub catalog: Option<String>,
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<crate::models::SqlFormat>,
    #[serde(rename = "on_wait_timeout", skip_serializing_if = "Option::is_none")]
    pub on_wait_timeout: Option<crate::models::SqlTimeoutAction>,
}

impl SqlExecuteStatementRequest {
    pub fn new() -> SqlExecuteStatementRequest {
        SqlExecuteStatementRequest {
            warehouse_id: None,
            schema: None,
            disposition: None,
            wait_timeout: None,
            statement: None,
            byte_limit: None,
            catalog: None,
            format: None,
            on_wait_timeout: None,
        }
    }
}


