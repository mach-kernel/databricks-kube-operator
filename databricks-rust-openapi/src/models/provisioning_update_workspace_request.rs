use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningUpdateWorkspaceRequest {
    /// The AWS region of the workspace's data plane (for example, `us-west-2`). This parameter is available only for updating failed workspaces.
    #[serde(rename = "aws_region", skip_serializing_if = "Option::is_none")]
    pub aws_region: Option<String>,
    /// ID of the workspace's credential configuration object. This parameter is available for updating both failed and running workspaces.
    #[serde(rename = "credentials_id", skip_serializing_if = "Option::is_none")]
    pub credentials_id: Option<String>,
    /// The ID of the workspace's managed services encryption key configuration object. This parameter is available only for updating failed workspaces.
    #[serde(rename = "managed_services_customer_managed_key_id", skip_serializing_if = "Option::is_none")]
    pub managed_services_customer_managed_key_id: Option<String>,
    /// The ID of the workspace's network configuration object. Used only if you already use a customer-managed VPC. For failed workspaces only, you can switch from a Databricks-managed VPC to a customer-managed VPC by updating the workspace to add a network configuration ID.
    #[serde(rename = "network_id", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    /// The ID of the workspace's storage configuration object. This parameter is available only for updating failed workspaces.
    #[serde(rename = "storage_configuration_id", skip_serializing_if = "Option::is_none")]
    pub storage_configuration_id: Option<String>,
    /// The ID of the key configuration object for workspace storage. This parameter is available for updating both failed and running workspaces.
    #[serde(rename = "storage_customer_managed_key_id", skip_serializing_if = "Option::is_none")]
    pub storage_customer_managed_key_id: Option<String>,
}

impl ProvisioningUpdateWorkspaceRequest {
    pub fn new() -> ProvisioningUpdateWorkspaceRequest {
        ProvisioningUpdateWorkspaceRequest {
            aws_region: None,
            credentials_id: None,
            managed_services_customer_managed_key_id: None,
            network_id: None,
            storage_configuration_id: None,
            storage_customer_managed_key_id: None,
        }
    }
}


