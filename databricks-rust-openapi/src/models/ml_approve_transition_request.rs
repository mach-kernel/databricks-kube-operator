use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlApproveTransitionRequest {
    /// Specifies whether to archive all current model versions in the target stage.
    #[serde(rename = "archive_existing_versions")]
    pub archive_existing_versions: bool,
    /// User-provided comment on the action.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Name of the model.
    #[serde(rename = "name")]
    pub name: String,
    /// Target stage of the transition. Valid values are:  * `None`: The initial stage of a model version.  * `Staging`: Staging or pre-production stage.  * `Production`: Production stage.  * `Archived`: Archived stage.
    #[serde(rename = "stage")]
    pub stage: crate::models::Mlstage,
    /// Version of the model.
    #[serde(rename = "version")]
    pub version: String,
}

impl MlApproveTransitionRequest {
    pub fn new(archive_existing_versions: bool, name: String, stage: crate::models::Mlstage, version: String) -> MlApproveTransitionRequest {
        MlApproveTransitionRequest {
            archive_existing_versions,
            comment: None,
            name,
            stage,
            version,
        }
    }
}


