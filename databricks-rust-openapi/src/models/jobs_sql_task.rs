use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobsSqlTask {
    /// If alert, indicates that this job must refresh a SQL alert.
    #[serde(rename = "alert", skip_serializing_if = "Option::is_none")]
    pub alert: Option<Box<crate::models::JobsSqlTaskAlert>>,
    /// If dashboard, indicates that this job must refresh a SQL dashboard.
    #[serde(rename = "dashboard", skip_serializing_if = "Option::is_none")]
    pub dashboard: Option<Box<crate::models::JobsSqlTaskDashboard>>,
    /// If file, indicates that this job runs a SQL file in a remote Git repository. Only one SQL statement is supported in a file. Multiple SQL statements separated by semicolons (;) are not permitted.
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<crate::models::JobsSqlTaskFile>>,
    /// Parameters to be used for each run of this job. The SQL alert task does not support custom parameters.
    #[serde(rename = "parameters", default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, String>>,
    /// If query, indicates that this job must execute a SQL query.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<Box<crate::models::JobsSqlTaskQuery>>,
    /// The canonical identifier of the SQL warehouse. Only serverless and pro SQL warehouses are supported.
    #[serde(rename = "warehouse_id")]
    pub warehouse_id: String,
}

impl JobsSqlTask {
    pub fn new(warehouse_id: String) -> JobsSqlTask {
        JobsSqlTask {
            alert: None,
            dashboard: None,
            file: None,
            parameters: None,
            query: None,
            warehouse_id,
        }
    }
}


