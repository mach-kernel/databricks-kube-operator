use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JobsRunState : The current state of the run.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct JobsRunState {
    /// A value indicating the run's current lifecycle state. This field is always available in the response.
    #[serde(rename = "life_cycle_state", skip_serializing_if = "Option::is_none")]
    pub life_cycle_state: Option<crate::models::JobsRunLifeCycleState>,
    /// A value indicating the run's result. This field is only available for terminal lifecycle states.
    #[serde(rename = "result_state", skip_serializing_if = "Option::is_none")]
    pub result_state: Option<crate::models::JobsRunResultState>,
    /// A descriptive message for the current state. This field is unstructured, and its exact format is subject to change.
    #[serde(rename = "state_message", skip_serializing_if = "Option::is_none")]
    pub state_message: Option<String>,
    /// A value indicating whether a run was canceled manually by a user or by the scheduler because the run timed out.
    #[serde(rename = "user_cancelled_or_timedout", skip_serializing_if = "Option::is_none")]
    pub user_cancelled_or_timedout: Option<bool>,
}

impl JobsRunState {
    /// The current state of the run.
    pub fn new() -> JobsRunState {
        JobsRunState {
            life_cycle_state: None,
            result_state: None,
            state_message: None,
            user_cancelled_or_timedout: None,
        }
    }
}


