use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlQueryPostContent {
    /// Data source ID.
    #[serde(rename = "data_source_id", skip_serializing_if = "Option::is_none")]
    pub data_source_id: Option<String>,
    /// General description that conveys additional information about this query such as usage notes.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The title of this query that appears in list views, widget headings, and on the query page.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Exclusively used for storing a list parameter definitions. A parameter is an object with `title`, `name`, `type`, and `value` properties. The `value` field here is the default value. It can be overridden at runtime.
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    /// The identifier of the workspace folder containing the object.
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    /// The text of the query to be run.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
}

impl SqlQueryPostContent {
    pub fn new() -> SqlQueryPostContent {
        SqlQueryPostContent {
            data_source_id: None,
            description: None,
            name: None,
            options: None,
            parent: None,
            query: None,
        }
    }
}


