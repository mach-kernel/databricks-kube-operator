use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlQueryInfo {
    #[serde(rename = "plans_state", skip_serializing_if = "Option::is_none")]
    pub plans_state: Option<crate::models::SqlPlansState>,
    /// Alias for `warehouse_id`.
    #[serde(rename = "endpoint_id", skip_serializing_if = "Option::is_none")]
    pub endpoint_id: Option<String>,
    /// The ID of the user who ran the query.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The time the query ended.
    #[serde(rename = "query_end_time_ms", skip_serializing_if = "Option::is_none")]
    pub query_end_time_ms: Option<i32>,
    /// The number of results returned by the query.
    #[serde(rename = "rows_produced", skip_serializing_if = "Option::is_none")]
    pub rows_produced: Option<i32>,
    /// URL to the query plan.
    #[serde(rename = "spark_ui_url", skip_serializing_if = "Option::is_none")]
    pub spark_ui_url: Option<String>,
    /// The ID of the user whose credentials were used to run the query.
    #[serde(rename = "executed_as_user_id", skip_serializing_if = "Option::is_none")]
    pub executed_as_user_id: Option<i32>,
    #[serde(rename = "channel_used", skip_serializing_if = "Option::is_none")]
    pub channel_used: Option<Box<crate::models::SqlChannelInfo>>,
    /// The email address or username of the user who ran the query.
    #[serde(rename = "user_name", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// Warehouse ID.
    #[serde(rename = "warehouse_id", skip_serializing_if = "Option::is_none")]
    pub warehouse_id: Option<String>,
    /// A key that can be used to look up query details.
    #[serde(rename = "lookup_key", skip_serializing_if = "Option::is_none")]
    pub lookup_key: Option<String>,
    /// The time execution of the query ended.
    #[serde(rename = "execution_end_time_ms", skip_serializing_if = "Option::is_none")]
    pub execution_end_time_ms: Option<i32>,
    /// Reserved for internal use.
    #[serde(rename = "canSubscribeToLiveQuery", skip_serializing_if = "Option::is_none")]
    pub can_subscribe_to_live_query: Option<bool>,
    /// Whether more updates for the query are expected.
    #[serde(rename = "is_final", skip_serializing_if = "Option::is_none")]
    pub is_final: Option<bool>,
    /// The time the query started.
    #[serde(rename = "query_start_time_ms", skip_serializing_if = "Option::is_none")]
    pub query_start_time_ms: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::SqlQueryStatus>,
    /// Message describing why the query could not complete.
    #[serde(rename = "error_message", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    /// The query ID.
    #[serde(rename = "query_id", skip_serializing_if = "Option::is_none")]
    pub query_id: Option<String>,
    #[serde(rename = "statement_type", skip_serializing_if = "Option::is_none")]
    pub statement_type: Option<crate::models::SqlQueryStatementType>,
    /// Total execution time of the query from the clientâ€™s point of view, in milliseconds.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// The email address or username of the user whose credentials were used to run the query.
    #[serde(rename = "executed_as_user_name", skip_serializing_if = "Option::is_none")]
    pub executed_as_user_name: Option<String>,
    /// The text of the query.
    #[serde(rename = "query_text", skip_serializing_if = "Option::is_none")]
    pub query_text: Option<String>,
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Box<crate::models::SqlQueryMetrics>>,
}

impl SqlQueryInfo {
    pub fn new() -> SqlQueryInfo {
        SqlQueryInfo {
            plans_state: None,
            endpoint_id: None,
            user_id: None,
            query_end_time_ms: None,
            rows_produced: None,
            spark_ui_url: None,
            executed_as_user_id: None,
            channel_used: None,
            user_name: None,
            warehouse_id: None,
            lookup_key: None,
            execution_end_time_ms: None,
            can_subscribe_to_live_query: None,
            is_final: None,
            query_start_time_ms: None,
            status: None,
            error_message: None,
            query_id: None,
            statement_type: None,
            duration: None,
            executed_as_user_name: None,
            query_text: None,
            metrics: None,
        }
    }
}


