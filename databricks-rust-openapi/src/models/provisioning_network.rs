use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningNetwork {
    /// Time in epoch milliseconds when the network was created.
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<i64>,
    #[serde(rename = "vpc_endpoints", skip_serializing_if = "Option::is_none")]
    pub vpc_endpoints: Option<Box<crate::models::ProvisioningNetworkVpcEndpoints>>,
    #[serde(rename = "security_group_ids", skip_serializing_if = "Option::is_none")]
    pub security_group_ids: Option<Vec<String>>,
    #[serde(rename = "warning_messages", skip_serializing_if = "Option::is_none")]
    pub warning_messages: Option<Vec<crate::models::ProvisioningNetworkWarning>>,
    /// The human-readable name of the network configuration.
    #[serde(rename = "network_name", skip_serializing_if = "Option::is_none")]
    pub network_name: Option<String>,
    /// Workspace ID associated with this network configuration.
    #[serde(rename = "workspace_id", skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<i64>,
    /// The Databricks network configuration ID.
    #[serde(rename = "network_id", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    #[serde(rename = "vpc_status", skip_serializing_if = "Option::is_none")]
    pub vpc_status: Option<crate::models::ProvisioningVpcStatus>,
    #[serde(rename = "gcp_network_info", skip_serializing_if = "Option::is_none")]
    pub gcp_network_info: Option<Box<crate::models::ProvisioningGcpNetworkInfo>>,
    #[serde(rename = "subnet_ids", skip_serializing_if = "Option::is_none")]
    pub subnet_ids: Option<Vec<String>>,
    #[serde(rename = "error_messages", skip_serializing_if = "Option::is_none")]
    pub error_messages: Option<Vec<crate::models::ProvisioningNetworkHealth>>,
    /// The ID of the VPC associated with this network configuration. VPC IDs can be used in multiple networks.
    #[serde(rename = "vpc_id", skip_serializing_if = "Option::is_none")]
    pub vpc_id: Option<String>,
    /// The Databricks account ID associated with this network configuration.
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
}

impl ProvisioningNetwork {
    pub fn new() -> ProvisioningNetwork {
        ProvisioningNetwork {
            creation_time: None,
            vpc_endpoints: None,
            security_group_ids: None,
            warning_messages: None,
            network_name: None,
            workspace_id: None,
            network_id: None,
            vpc_status: None,
            gcp_network_info: None,
            subnet_ids: None,
            error_messages: None,
            vpc_id: None,
            account_id: None,
        }
    }
}


