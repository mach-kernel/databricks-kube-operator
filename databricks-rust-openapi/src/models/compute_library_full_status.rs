use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeLibraryFullStatus {
    /// Whether the library was set to be installed on all clusters via the libraries UI.
    #[serde(rename = "is_library_for_all_clusters", skip_serializing_if = "Option::is_none")]
    pub is_library_for_all_clusters: Option<bool>,
    /// Unique identifier for the library.
    #[serde(rename = "library", skip_serializing_if = "Option::is_none")]
    pub library: Option<Box<crate::models::ComputeLibrary>>,
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<String>>,
    /// Status of installing the library on the cluster.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl ComputeLibraryFullStatus {
    pub fn new() -> ComputeLibraryFullStatus {
        ComputeLibraryFullStatus {
            is_library_for_all_clusters: None,
            library: None,
            messages: None,
            status: None,
        }
    }
}

/// Status of installing the library on the cluster.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "RESOLVING")]
    Resolving,
    #[serde(rename = "INSTALLING")]
    Installing,
    #[serde(rename = "INSTALLED")]
    Installed,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "UNINSTALL_ON_RESTART")]
    UninstallOnRestart,
    #[serde(rename = "SKIPPED")]
    Skipped,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

