use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlRunInfo {
    /// User who initiated the run. This field is deprecated as of MLflow 1.0, and will be removed in a future MLflow release. Use 'Mlflowuser' tag instead.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// URI of the directory where artifacts should be uploaded. This can be a local path (starting with \"/\"), or a distributed file system (DFS) path, like `s3://bucket/directory` or `dbfs:/my/directory`. If not set, the local `./mlruns` directory is  chosen.
    #[serde(rename = "artifact_uri", skip_serializing_if = "Option::is_none")]
    pub artifact_uri: Option<String>,
    /// The experiment ID.
    #[serde(rename = "experiment_id", skip_serializing_if = "Option::is_none")]
    pub experiment_id: Option<String>,
    /// Current life cycle stage of the experiment : OneOf(\"active\", \"deleted\")
    #[serde(rename = "lifecycle_stage", skip_serializing_if = "Option::is_none")]
    pub lifecycle_stage: Option<String>,
    /// Current status of the run.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Unix timestamp of when the run ended in milliseconds.
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    /// Unique identifier for the run.
    #[serde(rename = "run_id", skip_serializing_if = "Option::is_none")]
    pub run_id: Option<String>,
    /// Unix timestamp of when the run started in milliseconds.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    /// [Deprecated, use run_id instead] Unique identifier for the run. This field will be removed in a future MLflow version.
    #[serde(rename = "run_uuid", skip_serializing_if = "Option::is_none")]
    pub run_uuid: Option<String>,
}

impl MlRunInfo {
    pub fn new() -> MlRunInfo {
        MlRunInfo {
            user_id: None,
            artifact_uri: None,
            experiment_id: None,
            lifecycle_stage: None,
            status: None,
            end_time: None,
            run_id: None,
            start_time: None,
            run_uuid: None,
        }
    }
}

/// Current status of the run.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "SCHEDULED")]
    Scheduled,
    #[serde(rename = "FINISHED")]
    Finished,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "KILLED")]
    Killed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Running
    }
}

