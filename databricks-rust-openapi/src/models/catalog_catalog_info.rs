use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogCatalogInfo {
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// The name of delta sharing provider.  A Delta Sharing catalog is a catalog that is based on a Delta share on a remote sharing server. 
    #[serde(rename = "provider_name", skip_serializing_if = "Option::is_none")]
    pub provider_name: Option<String>,
    /// Username of current owner of catalog.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The name of the connection to an external data source.
    #[serde(rename = "connection_name", skip_serializing_if = "Option::is_none")]
    pub connection_name: Option<String>,
    #[serde(rename = "effective_predictive_optimization_flag", skip_serializing_if = "Option::is_none")]
    pub effective_predictive_optimization_flag: Option<Box<crate::models::CatalogEffectivePredictiveOptimizationFlag>>,
    /// The name of the share under the share provider.
    #[serde(rename = "share_name", skip_serializing_if = "Option::is_none")]
    pub share_name: Option<String>,
    /// Unique identifier of parent metastore.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// Username of catalog creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Name of catalog.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Time at which this catalog was last modified, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    #[serde(rename = "enable_predictive_optimization", skip_serializing_if = "Option::is_none")]
    pub enable_predictive_optimization: Option<crate::models::CatalogEnablePredictiveOptimization>,
    /// Storage root URL for managed tables within catalog.
    #[serde(rename = "storage_root", skip_serializing_if = "Option::is_none")]
    pub storage_root: Option<String>,
    #[serde(rename = "catalog_type", skip_serializing_if = "Option::is_none")]
    pub catalog_type: Option<crate::models::CatalogCatalogType>,
    /// Time at which this catalog was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "isolation_mode", skip_serializing_if = "Option::is_none")]
    pub isolation_mode: Option<crate::models::CatalogIsolationMode>,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Username of user who last modified catalog.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "options", default, skip_serializing_if = "Option::is_none")]
    pub options: Option<::std::collections::HashMap<String, String>>,
    /// Storage Location URL (full path) for managed tables within catalog.
    #[serde(rename = "storage_location", skip_serializing_if = "Option::is_none")]
    pub storage_location: Option<String>,
}

impl CatalogCatalogInfo {
    pub fn new() -> CatalogCatalogInfo {
        CatalogCatalogInfo {
            properties: None,
            provider_name: None,
            owner: None,
            connection_name: None,
            effective_predictive_optimization_flag: None,
            share_name: None,
            metastore_id: None,
            created_by: None,
            name: None,
            updated_at: None,
            enable_predictive_optimization: None,
            storage_root: None,
            catalog_type: None,
            created_at: None,
            isolation_mode: None,
            comment: None,
            updated_by: None,
            options: None,
            storage_location: None,
        }
    }
}


