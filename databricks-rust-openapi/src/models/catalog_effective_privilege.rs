use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogEffectivePrivilege {
    /// The full name of the object that conveys this privilege via inheritance. This field is omitted when privilege is not inherited (it's assigned to the securable itself). 
    #[serde(rename = "inherited_from_name", skip_serializing_if = "Option::is_none")]
    pub inherited_from_name: Option<String>,
    /// The type of the object that conveys this privilege via inheritance. This field is omitted when privilege is not inherited (it's assigned to the securable itself). 
    #[serde(rename = "inherited_from_type", skip_serializing_if = "Option::is_none")]
    pub inherited_from_type: Option<crate::models::CatalogSecurableType>,
    /// The privilege assigned to the principal.
    #[serde(rename = "privilege", skip_serializing_if = "Option::is_none")]
    pub privilege: Option<crate::models::CatalogPrivilege>,
}

impl CatalogEffectivePrivilege {
    pub fn new() -> CatalogEffectivePrivilege {
        CatalogEffectivePrivilege {
            inherited_from_name: None,
            inherited_from_type: None,
            privilege: None,
        }
    }
}


