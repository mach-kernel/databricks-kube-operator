use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeEventDetails {
    /// Whether or not a blocklisted node should be terminated. For ClusterEventType NODE_BLACKLISTED.
    #[serde(rename = "enable_termination_for_node_blocklisted", skip_serializing_if = "Option::is_none")]
    pub enable_termination_for_node_blocklisted: Option<bool>,
    /// The user that caused the event to occur. (Empty if it was done by the control plane.)
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// <needs content added>
    #[serde(rename = "free_space", skip_serializing_if = "Option::is_none")]
    pub free_space: Option<i64>,
    /// The size of the cluster before an edit or resize.
    #[serde(rename = "previous_cluster_size", skip_serializing_if = "Option::is_none")]
    pub previous_cluster_size: Option<Box<crate::models::ComputeClusterSize>>,
    /// Instance Id where the event originated from
    #[serde(rename = "instance_id", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<String>,
    /// The cause of a change in target size.
    #[serde(rename = "cause", skip_serializing_if = "Option::is_none")]
    pub cause: Option<Cause>,
    /// The current number of nodes in the cluster.
    #[serde(rename = "current_num_workers", skip_serializing_if = "Option::is_none")]
    pub current_num_workers: Option<i32>,
    /// Current disk size in bytes
    #[serde(rename = "disk_size", skip_serializing_if = "Option::is_none")]
    pub disk_size: Option<i64>,
    /// The targeted number of nodes in the cluster.
    #[serde(rename = "target_num_workers", skip_serializing_if = "Option::is_none")]
    pub target_num_workers: Option<i32>,
    /// * For created clusters, the attributes of the cluster. * For edited clusters, the new attributes of the cluster.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Box<crate::models::ComputeClusterAttributes>>,
    /// Previous disk size in bytes
    #[serde(rename = "previous_disk_size", skip_serializing_if = "Option::is_none")]
    pub previous_disk_size: Option<i64>,
    /// The actual cluster size that was set in the cluster creation or edit.
    #[serde(rename = "cluster_size", skip_serializing_if = "Option::is_none")]
    pub cluster_size: Option<Box<crate::models::ComputeClusterSize>>,
    /// More details about the change in driver's state
    #[serde(rename = "driver_state_message", skip_serializing_if = "Option::is_none")]
    pub driver_state_message: Option<String>,
    /// Unique identifier of the specific job run associated with this cluster event * For clusters created for jobs, this will be the same as the cluster name
    #[serde(rename = "job_run_name", skip_serializing_if = "Option::is_none")]
    pub job_run_name: Option<String>,
    /// A termination reason:   * On a TERMINATED event, this is the reason of the termination.   * On a RESIZE_COMPLETE event, this indicates the reason that we failed to acquire some nodes.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Box<crate::models::ComputeTerminationReason>>,
    /// The targeted number of vCPUs in the cluster.
    #[serde(rename = "target_num_vcpus", skip_serializing_if = "Option::is_none")]
    pub target_num_vcpus: Option<i32>,
    /// The current number of vCPUs in the cluster.
    #[serde(rename = "current_num_vcpus", skip_serializing_if = "Option::is_none")]
    pub current_num_vcpus: Option<i32>,
    /// The cluster attributes before a cluster was edited.
    #[serde(rename = "previous_attributes", skip_serializing_if = "Option::is_none")]
    pub previous_attributes: Option<Box<crate::models::ComputeClusterAttributes>>,
    /// <needs content added>
    #[serde(rename = "did_not_expand_reason", skip_serializing_if = "Option::is_none")]
    pub did_not_expand_reason: Option<String>,
}

impl ComputeEventDetails {
    pub fn new() -> ComputeEventDetails {
        ComputeEventDetails {
            enable_termination_for_node_blocklisted: None,
            user: None,
            free_space: None,
            previous_cluster_size: None,
            instance_id: None,
            cause: None,
            current_num_workers: None,
            disk_size: None,
            target_num_workers: None,
            attributes: None,
            previous_disk_size: None,
            cluster_size: None,
            driver_state_message: None,
            job_run_name: None,
            reason: None,
            target_num_vcpus: None,
            current_num_vcpus: None,
            previous_attributes: None,
            did_not_expand_reason: None,
        }
    }
}

/// The cause of a change in target size.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cause {
    #[serde(rename = "AUTOSCALE")]
    Autoscale,
    #[serde(rename = "USER_REQUEST")]
    UserRequest,
    #[serde(rename = "AUTORECOVERY")]
    Autorecovery,
    #[serde(rename = "REPLACE_BAD_NODES")]
    ReplaceBadNodes,
}

impl Default for Cause {
    fn default() -> Cause {
        Self::Autoscale
    }
}

