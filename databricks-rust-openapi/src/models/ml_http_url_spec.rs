use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlHttpUrlSpec {
    /// Value of the authorization header that should be sent in the request sent by the wehbook. It should be of the form `\"<auth type> <credentials>\"`. If set to an empty string, no authorization header will be included in the request.
    #[serde(rename = "authorization", skip_serializing_if = "Option::is_none")]
    pub authorization: Option<String>,
    /// Enable/disable SSL certificate validation. Default is true. For self-signed certificates, this field must be false AND the destination server must disable certificate validation as well. For security purposes, it is encouraged to perform secret validation with the HMAC-encoded portion of the payload and acknowledge the risk associated with disabling hostname validation whereby it becomes more likely that requests can be maliciously routed to an unintended host.
    #[serde(rename = "enable_ssl_verification", skip_serializing_if = "Option::is_none")]
    pub enable_ssl_verification: Option<bool>,
    /// Shared secret required for HMAC encoding payload. The HMAC-encoded payload will be sent in the header as: { \"X-Databricks-Signature\": $encoded_payload }.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// External HTTPS URL called on event trigger (by using a POST request).
    #[serde(rename = "url")]
    pub url: String,
}

impl MlHttpUrlSpec {
    pub fn new(url: String) -> MlHttpUrlSpec {
        MlHttpUrlSpec {
            authorization: None,
            enable_ssl_verification: None,
            secret: None,
            url,
        }
    }
}


