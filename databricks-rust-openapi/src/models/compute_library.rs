use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeLibrary {
    /// Specification of a CRAN library to be installed as part of the library
    #[serde(rename = "cran", skip_serializing_if = "Option::is_none")]
    pub cran: Option<Box<crate::models::ComputeRCranLibrary>>,
    /// URI of the egg to be installed. Currently only DBFS and S3 URIs are supported. For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\": \"s3://my-bucket/egg\" }`. If S3 is used, please make sure the cluster has read access on the library. You may need to launch the cluster with an IAM role to access the S3 URI.
    #[serde(rename = "egg", skip_serializing_if = "Option::is_none")]
    pub egg: Option<String>,
    /// URI of the jar to be installed. Currently only DBFS and S3 URIs are supported. For example: `{ \"jar\": \"dbfs:/mnt/databricks/Libraryjar\" }` or `{ \"jar\": \"s3://my-bucket/Libraryjar\" }`. If S3 is used, please make sure the cluster has read access on the library. You may need to launch the cluster with an IAM role to access the S3 URI.
    #[serde(rename = "jar", skip_serializing_if = "Option::is_none")]
    pub jar: Option<String>,
    /// Specification of a maven library to be installed. For example: `{ \"coordinates\": \"Orgjsoup:jsoup:1.7.2\" }`
    #[serde(rename = "maven", skip_serializing_if = "Option::is_none")]
    pub maven: Option<Box<crate::models::ComputeMavenLibrary>>,
    /// Specification of a PyPi library to be installed. For example: `{ \"package\": \"simplejson\" }`
    #[serde(rename = "pypi", skip_serializing_if = "Option::is_none")]
    pub pypi: Option<Box<crate::models::ComputePythonPyPiLibrary>>,
    /// URI of the wheel to be installed. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\": \"s3://my-bucket/whl\" }`. If S3 is used, please make sure the cluster has read access on the library. You may need to launch the cluster with an IAM role to access the S3 URI.
    #[serde(rename = "whl", skip_serializing_if = "Option::is_none")]
    pub whl: Option<String>,
}

impl ComputeLibrary {
    pub fn new() -> ComputeLibrary {
        ComputeLibrary {
            cran: None,
            egg: None,
            jar: None,
            maven: None,
            pypi: None,
            whl: None,
        }
    }
}


