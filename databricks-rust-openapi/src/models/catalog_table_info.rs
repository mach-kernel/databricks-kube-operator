use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogTableInfo {
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// Username of current owner of table.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Name of parent catalog.
    #[serde(rename = "catalog_name", skip_serializing_if = "Option::is_none")]
    pub catalog_name: Option<String>,
    /// View definition SQL (when __table_type__ is **VIEW**, **MATERIALIZED_VIEW**, or **STREAMING_TABLE**)
    #[serde(rename = "view_definition", skip_serializing_if = "Option::is_none")]
    pub view_definition: Option<String>,
    /// Full name of table, in form of __catalog_name__.__schema_name__.__table_name__
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "columns", skip_serializing_if = "Option::is_none")]
    pub columns: Option<Vec<crate::models::CatalogColumnInfo>>,
    #[serde(rename = "table_type", skip_serializing_if = "Option::is_none")]
    pub table_type: Option<crate::models::CatalogTableType>,
    /// Unique ID of the Data Access Configuration to use with the table data.
    #[serde(rename = "data_access_configuration_id", skip_serializing_if = "Option::is_none")]
    pub data_access_configuration_id: Option<String>,
    #[serde(rename = "effective_predictive_optimization_flag", skip_serializing_if = "Option::is_none")]
    pub effective_predictive_optimization_flag: Option<Box<crate::models::CatalogEffectivePredictiveOptimizationFlag>>,
    #[serde(rename = "encryption_details", skip_serializing_if = "Option::is_none")]
    pub encryption_details: Option<Box<crate::models::CatalogEncryptionDetails>>,
    /// Unique identifier of parent metastore.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// List of schemes whose objects can be referenced without qualification.
    #[serde(rename = "sql_path", skip_serializing_if = "Option::is_none")]
    pub sql_path: Option<String>,
    #[serde(rename = "table_constraints", skip_serializing_if = "Option::is_none")]
    pub table_constraints: Option<Box<crate::models::CatalogTableConstraintList>>,
    /// Username of table creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// Name of parent schema relative to its parent catalog.
    #[serde(rename = "schema_name", skip_serializing_if = "Option::is_none")]
    pub schema_name: Option<String>,
    #[serde(rename = "row_filter", skip_serializing_if = "Option::is_none")]
    pub row_filter: Option<Box<crate::models::CatalogTableRowFilter>>,
    /// Name of table, relative to parent schema.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Time at which this table was last modified, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// Name of table, relative to parent schema.
    #[serde(rename = "table_id", skip_serializing_if = "Option::is_none")]
    pub table_id: Option<String>,
    #[serde(rename = "enable_predictive_optimization", skip_serializing_if = "Option::is_none")]
    pub enable_predictive_optimization: Option<crate::models::CatalogEnablePredictiveOptimization>,
    /// Information pertaining to current state of the delta table.
    #[serde(rename = "delta_runtime_properties_kvpairs", skip_serializing_if = "Option::is_none")]
    pub delta_runtime_properties_kvpairs: Option<Box<crate::models::CatalogDeltaRuntimePropertiesKvPairs>>,
    /// Time at which this table was deleted, in epoch milliseconds. Field is omitted if table is not deleted.
    #[serde(rename = "deleted_at", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<i64>,
    /// The AWS access point to use when accesing s3 for this external location.
    #[serde(rename = "access_point", skip_serializing_if = "Option::is_none")]
    pub access_point: Option<String>,
    /// Time at which this table was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "data_source_format", skip_serializing_if = "Option::is_none")]
    pub data_source_format: Option<crate::models::CatalogDataSourceFormat>,
    /// Username of user who last modified the table.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// Storage root URL for table (for **MANAGED**, **EXTERNAL** tables)
    #[serde(rename = "storage_location", skip_serializing_if = "Option::is_none")]
    pub storage_location: Option<String>,
    /// Name of the storage credential, when a storage credential is configured for use with this table.
    #[serde(rename = "storage_credential_name", skip_serializing_if = "Option::is_none")]
    pub storage_credential_name: Option<String>,
    #[serde(rename = "view_dependencies", skip_serializing_if = "Option::is_none")]
    pub view_dependencies: Option<Vec<crate::models::CatalogDependency>>,
}

impl CatalogTableInfo {
    pub fn new() -> CatalogTableInfo {
        CatalogTableInfo {
            properties: None,
            owner: None,
            catalog_name: None,
            view_definition: None,
            full_name: None,
            columns: None,
            table_type: None,
            data_access_configuration_id: None,
            effective_predictive_optimization_flag: None,
            encryption_details: None,
            metastore_id: None,
            sql_path: None,
            table_constraints: None,
            created_by: None,
            schema_name: None,
            row_filter: None,
            name: None,
            updated_at: None,
            table_id: None,
            enable_predictive_optimization: None,
            delta_runtime_properties_kvpairs: None,
            deleted_at: None,
            access_point: None,
            created_at: None,
            comment: None,
            data_source_format: None,
            updated_by: None,
            storage_location: None,
            storage_credential_name: None,
            view_dependencies: None,
        }
    }
}


