use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobsPythonWheelTask {
    /// Named entry point to use, if it does not exist in the metadata of the package it executes the function from the package directly using `$packageName.$entryPoint()`
    #[serde(rename = "entry_point", skip_serializing_if = "Option::is_none")]
    pub entry_point: Option<String>,
    /// Command-line parameters passed to Python wheel task in the form of `[\"--name=task\", \"--data=dbfs:/path/to/Datajson\"]`. Leave it empty if `parameters` is not null.
    #[serde(rename = "named_parameters", default, skip_serializing_if = "Option::is_none")]
    pub named_parameters: Option<::std::collections::HashMap<String, String>>,
    /// Name of the package to execute
    #[serde(rename = "package_name", skip_serializing_if = "Option::is_none")]
    pub package_name: Option<String>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<String>>,
}

impl JobsPythonWheelTask {
    pub fn new() -> JobsPythonWheelTask {
        JobsPythonWheelTask {
            entry_point: None,
            named_parameters: None,
            package_name: None,
            parameters: None,
        }
    }
}


