use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SqlColumnInfo {
    /// Name of Column.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Ordinal position of column (starting at position 0).
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// Format of interval type.
    #[serde(rename = "type_interval_type", skip_serializing_if = "Option::is_none")]
    pub type_interval_type: Option<String>,
    /// Name of type (INT, STRUCT, MAP, and so on)
    #[serde(rename = "type_name", skip_serializing_if = "Option::is_none")]
    pub type_name: Option<TypeName>,
    /// Digits of precision.
    #[serde(rename = "type_precision", skip_serializing_if = "Option::is_none")]
    pub type_precision: Option<i32>,
    /// Digits to right of decimal.
    #[serde(rename = "type_scale", skip_serializing_if = "Option::is_none")]
    pub type_scale: Option<i32>,
    /// Full data type spec, SQL/catalogString text.
    #[serde(rename = "type_text", skip_serializing_if = "Option::is_none")]
    pub type_text: Option<String>,
}

impl SqlColumnInfo {
    pub fn new() -> SqlColumnInfo {
        SqlColumnInfo {
            name: None,
            position: None,
            type_interval_type: None,
            type_name: None,
            type_precision: None,
            type_scale: None,
            type_text: None,
        }
    }
}

/// Name of type (INT, STRUCT, MAP, and so on)
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeName {
    #[serde(rename = "BOOLEAN")]
    Boolean,
    #[serde(rename = "BYTE")]
    Byte,
    #[serde(rename = "SHORT")]
    Short,
    #[serde(rename = "INT")]
    Int,
    #[serde(rename = "LONG")]
    Long,
    #[serde(rename = "FLOAT")]
    Float,
    #[serde(rename = "DOUBLE")]
    Double,
    #[serde(rename = "DATE")]
    Date,
    #[serde(rename = "TIMESTAMP")]
    Timestamp,
    #[serde(rename = "STRING")]
    String,
    #[serde(rename = "BINARY")]
    Binary,
    #[serde(rename = "DECIMAL")]
    Decimal,
    #[serde(rename = "INTERVAL")]
    Interval,
    #[serde(rename = "ARRAY")]
    Array,
    #[serde(rename = "STRUCT")]
    Struct,
    #[serde(rename = "MAP")]
    Map,
    #[serde(rename = "CHAR")]
    Char,
    #[serde(rename = "NULL")]
    Null,
    #[serde(rename = "USER_DEFINED_TYPE")]
    UserDefinedType,
}

impl Default for TypeName {
    fn default() -> TypeName {
        Self::Boolean
    }
}

