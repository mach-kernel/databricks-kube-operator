use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SqlServiceErrorCode {
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "INTERNAL_ERROR")]
    InternalError,
    #[serde(rename = "TEMPORARILY_UNAVAILABLE")]
    TemporarilyUnavailable,
    #[serde(rename = "IO_ERROR")]
    IoError,
    #[serde(rename = "BAD_REQUEST")]
    BadRequest,
    #[serde(rename = "SERVICE_UNDER_MAINTENANCE")]
    ServiceUnderMaintenance,
    #[serde(rename = "WORKSPACE_TEMPORARILY_UNAVAILABLE")]
    WorkspaceTemporarilyUnavailable,
    #[serde(rename = "DEADLINE_EXCEEDED")]
    DeadlineExceeded,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "RESOURCE_EXHAUSTED")]
    ResourceExhausted,
    #[serde(rename = "ABORTED")]
    Aborted,
    #[serde(rename = "NOT_FOUND")]
    NotFound,
    #[serde(rename = "ALREADY_EXISTS")]
    AlreadyExists,
    #[serde(rename = "UNAUTHENTICATED")]
    Unauthenticated,

}

impl ToString for SqlServiceErrorCode {
    fn to_string(&self) -> String {
        match self {
            Self::Unknown => String::from("UNKNOWN"),
            Self::InternalError => String::from("INTERNAL_ERROR"),
            Self::TemporarilyUnavailable => String::from("TEMPORARILY_UNAVAILABLE"),
            Self::IoError => String::from("IO_ERROR"),
            Self::BadRequest => String::from("BAD_REQUEST"),
            Self::ServiceUnderMaintenance => String::from("SERVICE_UNDER_MAINTENANCE"),
            Self::WorkspaceTemporarilyUnavailable => String::from("WORKSPACE_TEMPORARILY_UNAVAILABLE"),
            Self::DeadlineExceeded => String::from("DEADLINE_EXCEEDED"),
            Self::Cancelled => String::from("CANCELLED"),
            Self::ResourceExhausted => String::from("RESOURCE_EXHAUSTED"),
            Self::Aborted => String::from("ABORTED"),
            Self::NotFound => String::from("NOT_FOUND"),
            Self::AlreadyExists => String::from("ALREADY_EXISTS"),
            Self::Unauthenticated => String::from("UNAUTHENTICATED"),
        }
    }
}

impl Default for SqlServiceErrorCode {
    fn default() -> SqlServiceErrorCode {
        Self::Unknown
    }
}




