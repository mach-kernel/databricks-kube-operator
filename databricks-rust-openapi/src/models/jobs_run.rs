use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobsRun {
    /// The creator user name. This field won’t be included in the response if the user has already been deleted.
    #[serde(rename = "creator_user_name", skip_serializing_if = "Option::is_none")]
    pub creator_user_name: Option<String>,
    /// The time in milliseconds it took to execute the commands in the JAR or notebook until they  completed, failed, timed out, were cancelled, or encountered an unexpected error. The duration of a task run is the sum of the `setup_duration`, `execution_duration`, and the  `cleanup_duration`. The `execution_duration` field is set to 0 for multitask job runs. The total  duration of a multitask job run is the value of the `run_duration` field.
    #[serde(rename = "execution_duration", skip_serializing_if = "Option::is_none")]
    pub execution_duration: Option<i64>,
    #[serde(rename = "run_type", skip_serializing_if = "Option::is_none")]
    pub run_type: Option<crate::models::JobsRunType>,
    /// If this run is a retry of a prior run attempt, this field contains the run_id of the original attempt; otherwise, it is the same as the run_id.
    #[serde(rename = "original_attempt_run_id", skip_serializing_if = "Option::is_none")]
    pub original_attempt_run_id: Option<i64>,
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<crate::models::JobsRunTask>>,
    #[serde(rename = "job_clusters", skip_serializing_if = "Option::is_none")]
    pub job_clusters: Option<Vec<crate::models::JobsJobCluster>>,
    /// The time in milliseconds it took the job run and all of its repairs to finish.
    #[serde(rename = "run_duration", skip_serializing_if = "Option::is_none")]
    pub run_duration: Option<i32>,
    /// A snapshot of the job’s cluster specification when this run was created.
    #[serde(rename = "cluster_spec", skip_serializing_if = "Option::is_none")]
    pub cluster_spec: Option<Box<crate::models::JobsClusterSpec>>,
    /// The sequence number of this run attempt for a triggered job run. The initial attempt of a run has an attempt_number of 0\\. If the initial run attempt fails, and the job has a retry policy (`max_retries` \\> 0), subsequent runs are created with an `original_attempt_run_id` of the original attempt’s ID and an incrementing `attempt_number`. Runs are retried only until they succeed, and the maximum `attempt_number` is the same as the `max_retries` value for the job.
    #[serde(rename = "attempt_number", skip_serializing_if = "Option::is_none")]
    pub attempt_number: Option<i32>,
    /// The time in milliseconds it took to set up the cluster. For runs that run on new clusters this is the cluster creation time, for runs that run on existing clusters this time should be very short. The duration of a task run is the sum of the `setup_duration`, `execution_duration`, and the `cleanup_duration`. The `setup_duration` field is set to 0 for multitask job runs. The total duration of a multitask job run is the value of the `run_duration` field.
    #[serde(rename = "setup_duration", skip_serializing_if = "Option::is_none")]
    pub setup_duration: Option<i64>,
    /// The cron schedule that triggered this run if it was triggered by the periodic scheduler.
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Box<crate::models::JobsCronSchedule>>,
    #[serde(rename = "job_parameters", skip_serializing_if = "Option::is_none")]
    pub job_parameters: Option<Vec<crate::models::JobsJobParameter>>,
    /// The canonical identifier of the job that contains this run.
    #[serde(rename = "job_id", skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i64>,
    /// The time in milliseconds it took to terminate the cluster and clean up any associated artifacts. The duration of a task run is the sum of the `setup_duration`, `execution_duration`, and the `cleanup_duration`. The `cleanup_duration` field is set to 0 for multitask job runs. The total duration of a multitask job run is the value of the `run_duration` field.
    #[serde(rename = "cleanup_duration", skip_serializing_if = "Option::is_none")]
    pub cleanup_duration: Option<i64>,
    /// A unique identifier for this job run. This is set to the same value as `run_id`.
    #[serde(rename = "number_in_job", skip_serializing_if = "Option::is_none")]
    pub number_in_job: Option<i64>,
    /// The parameters used for this run.
    #[serde(rename = "overriding_parameters", skip_serializing_if = "Option::is_none")]
    pub overriding_parameters: Option<Box<crate::models::JobsRunParameters>>,
    /// The time at which this run ended in epoch milliseconds (milliseconds since 1/1/1970 UTC). This field is set to 0 if the job is still running.
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    /// The canonical identifier of the run. This ID is unique across all runs of all jobs.
    #[serde(rename = "run_id", skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i64>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<crate::models::JobsRunState>>,
    /// The URL to the detail page of the run.
    #[serde(rename = "run_page_url", skip_serializing_if = "Option::is_none")]
    pub run_page_url: Option<String>,
    /// An optional specification for a remote Git repository containing the source code used by tasks. Version-controlled source code is supported by notebook, dbt, Python script, and SQL File tasks.  If `git_source` is set, these tasks retrieve the file from the remote repository by default. However, this behavior can be overridden by setting `source` to `WORKSPACE` on the task.  Note: dbt and SQL File tasks support only version-controlled sources. If dbt or SQL File tasks are used, `git_source` must be defined on the job.
    #[serde(rename = "git_source", skip_serializing_if = "Option::is_none")]
    pub git_source: Option<Box<crate::models::JobsGitSource>>,
    /// The continuous trigger that triggered this run.
    #[serde(rename = "continuous", skip_serializing_if = "Option::is_none")]
    pub continuous: Option<Box<crate::models::JobsContinuous>>,
    #[serde(rename = "trigger_info", skip_serializing_if = "Option::is_none")]
    pub trigger_info: Option<Box<crate::models::JobsTriggerInfo>>,
    #[serde(rename = "repair_history", skip_serializing_if = "Option::is_none")]
    pub repair_history: Option<Vec<crate::models::JobsRepairHistoryItem>>,
    /// The time at which this run was started in epoch milliseconds (milliseconds since 1/1/1970 UTC). This may not be the time when the job task starts executing, for example, if the job is scheduled to run on a new cluster, this is the time the cluster creation call is issued.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    #[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
    pub trigger: Option<crate::models::JobsTriggerType>,
    /// An optional name for the run. The maximum length is 4096 bytes in UTF-8 encoding.
    #[serde(rename = "run_name", skip_serializing_if = "Option::is_none")]
    pub run_name: Option<String>,
    /// The cluster used for this run. If the run is specified to use a new cluster, this field is set once the Jobs service has requested a cluster for the run.
    #[serde(rename = "cluster_instance", skip_serializing_if = "Option::is_none")]
    pub cluster_instance: Option<Box<crate::models::JobsClusterInstance>>,
}

impl JobsRun {
    pub fn new() -> JobsRun {
        JobsRun {
            creator_user_name: None,
            execution_duration: None,
            run_type: None,
            original_attempt_run_id: None,
            tasks: None,
            job_clusters: None,
            run_duration: None,
            cluster_spec: None,
            attempt_number: None,
            setup_duration: None,
            schedule: None,
            job_parameters: None,
            job_id: None,
            cleanup_duration: None,
            number_in_job: None,
            overriding_parameters: None,
            end_time: None,
            run_id: None,
            state: None,
            run_page_url: None,
            git_source: None,
            continuous: None,
            trigger_info: None,
            repair_history: None,
            start_time: None,
            trigger: None,
            run_name: None,
            cluster_instance: None,
        }
    }
}


