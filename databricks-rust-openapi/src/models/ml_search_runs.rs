use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlSearchRuns {
    #[serde(rename = "experiment_ids", skip_serializing_if = "Option::is_none")]
    pub experiment_ids: Option<Vec<String>>,
    /// A filter expression over params, metrics, and tags, that allows returning a subset of runs. The syntax is a subset of SQL that supports ANDing together binary operations between a param, metric, or tag and a constant.  Example: `Metricsrmse < 1 and params.model_class = 'LogisticRegression'`  You can select columns with special characters (hyphen, space, period, etc.) by using double quotes: `metrics.\"model class\" = 'LinearRegression' and tags.\"user-name\" = 'Tomas'`  Supported operators are `=`, `!=`, `>`, `>=`, `<`, and `<=`.
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Maximum number of runs desired. Max threshold is 50000
    #[serde(rename = "max_results", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,
    #[serde(rename = "order_by", skip_serializing_if = "Option::is_none")]
    pub order_by: Option<Vec<String>>,
    /// Token for the current page of runs.
    #[serde(rename = "page_token", skip_serializing_if = "Option::is_none")]
    pub page_token: Option<String>,
    /// Whether to display only active, only deleted, or all runs. Defaults to only active runs.
    #[serde(rename = "run_view_type", skip_serializing_if = "Option::is_none")]
    pub run_view_type: Option<RunViewType>,
}

impl MlSearchRuns {
    pub fn new() -> MlSearchRuns {
        MlSearchRuns {
            experiment_ids: None,
            filter: None,
            max_results: None,
            order_by: None,
            page_token: None,
            run_view_type: None,
        }
    }
}

/// Whether to display only active, only deleted, or all runs. Defaults to only active runs.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunViewType {
    #[serde(rename = "ACTIVE_ONLY")]
    ActiveOnly,
    #[serde(rename = "DELETED_ONLY")]
    DeletedOnly,
    #[serde(rename = "ALL")]
    All,
}

impl Default for RunViewType {
    fn default() -> RunViewType {
        Self::ActiveOnly
    }
}

