use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogGetMetastoreSummaryResponse {
    /// The owner of the metastore.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Cloud vendor of the metastore home shard (Eg., `aws`, `azure`, `gcp`).
    #[serde(rename = "cloud", skip_serializing_if = "Option::is_none")]
    pub cloud: Option<String>,
    /// The lifetime of delta sharing recipient token in seconds.
    #[serde(rename = "delta_sharing_recipient_token_lifetime_in_seconds", skip_serializing_if = "Option::is_none")]
    pub delta_sharing_recipient_token_lifetime_in_seconds: Option<i64>,
    /// Privilege model version of the metastore, of the form `Majorminor` (e.g., `1.0`).
    #[serde(rename = "privilege_model_version", skip_serializing_if = "Option::is_none")]
    pub privilege_model_version: Option<String>,
    /// Unique identifier of metastore.
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// Name of the storage credential to access the metastore storage_root.
    #[serde(rename = "storage_root_credential_name", skip_serializing_if = "Option::is_none")]
    pub storage_root_credential_name: Option<String>,
    /// Username of metastore creator.
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// UUID of storage credential to access the metastore storage_root.
    #[serde(rename = "storage_root_credential_id", skip_serializing_if = "Option::is_none")]
    pub storage_root_credential_id: Option<String>,
    /// The user-specified name of the metastore.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Globally unique metastore ID across clouds and regions, of the form `cloud:region:metastore_id`.
    #[serde(rename = "global_metastore_id", skip_serializing_if = "Option::is_none")]
    pub global_metastore_id: Option<String>,
    /// Time at which the metastore was last modified, in epoch milliseconds.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// Cloud region which the metastore serves (Eg., `us-west-2`, `westus`).
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Unique identifier of the metastore's (Default) Data Access Configuration.
    #[serde(rename = "default_data_access_config_id", skip_serializing_if = "Option::is_none")]
    pub default_data_access_config_id: Option<String>,
    /// The storage root URL for metastore
    #[serde(rename = "storage_root", skip_serializing_if = "Option::is_none")]
    pub storage_root: Option<String>,
    /// Time at which this metastore was created, in epoch milliseconds.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// The organization name of a Delta Sharing entity, to be used in Databricks-to-Databricks Delta Sharing as the official name.
    #[serde(rename = "delta_sharing_organization_name", skip_serializing_if = "Option::is_none")]
    pub delta_sharing_organization_name: Option<String>,
    /// Username of user who last modified the metastore.
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// The scope of Delta Sharing enabled for the metastore.
    #[serde(rename = "delta_sharing_scope", skip_serializing_if = "Option::is_none")]
    pub delta_sharing_scope: Option<DeltaSharingScope>,
}

impl CatalogGetMetastoreSummaryResponse {
    pub fn new() -> CatalogGetMetastoreSummaryResponse {
        CatalogGetMetastoreSummaryResponse {
            owner: None,
            cloud: None,
            delta_sharing_recipient_token_lifetime_in_seconds: None,
            privilege_model_version: None,
            metastore_id: None,
            storage_root_credential_name: None,
            created_by: None,
            storage_root_credential_id: None,
            name: None,
            global_metastore_id: None,
            updated_at: None,
            region: None,
            default_data_access_config_id: None,
            storage_root: None,
            created_at: None,
            delta_sharing_organization_name: None,
            updated_by: None,
            delta_sharing_scope: None,
        }
    }
}

/// The scope of Delta Sharing enabled for the metastore.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeltaSharingScope {
    #[serde(rename = "INTERNAL")]
    Internal,
    #[serde(rename = "INTERNAL_AND_EXTERNAL")]
    InternalAndExternal,
}

impl Default for DeltaSharingScope {
    fn default() -> DeltaSharingScope {
        Self::Internal
    }
}

