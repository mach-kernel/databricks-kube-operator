use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlSearchExperiments {
    /// String representing a SQL filter condition (Eg. \"name ILIKE 'my-experiment%'\")
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Maximum number of experiments desired. Max threshold is 3000.
    #[serde(rename = "max_results", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i64>,
    #[serde(rename = "order_by", skip_serializing_if = "Option::is_none")]
    pub order_by: Option<Vec<String>>,
    /// Token indicating the page of experiments to fetch
    #[serde(rename = "page_token", skip_serializing_if = "Option::is_none")]
    pub page_token: Option<String>,
    /// Qualifier for type of experiments to be returned. If unspecified, return only active experiments.
    #[serde(rename = "view_type", skip_serializing_if = "Option::is_none")]
    pub view_type: Option<ViewType>,
}

impl MlSearchExperiments {
    pub fn new() -> MlSearchExperiments {
        MlSearchExperiments {
            filter: None,
            max_results: None,
            order_by: None,
            page_token: None,
            view_type: None,
        }
    }
}

/// Qualifier for type of experiments to be returned. If unspecified, return only active experiments.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ViewType {
    #[serde(rename = "ACTIVE_ONLY")]
    ActiveOnly,
    #[serde(rename = "DELETED_ONLY")]
    DeletedOnly,
    #[serde(rename = "ALL")]
    All,
}

impl Default for ViewType {
    fn default() -> ViewType {
        Self::ActiveOnly
    }
}

