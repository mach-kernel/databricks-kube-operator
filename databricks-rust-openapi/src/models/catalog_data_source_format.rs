use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CatalogDataSourceFormat : Data source format

/// Data source format
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CatalogDataSourceFormat {
    #[serde(rename = "DELTA")]
    Delta,
    #[serde(rename = "CSV")]
    Csv,
    #[serde(rename = "JSON")]
    Json,
    #[serde(rename = "AVRO")]
    Avro,
    #[serde(rename = "PARQUET")]
    Parquet,
    #[serde(rename = "ORC")]
    Orc,
    #[serde(rename = "TEXT")]
    Text,
    #[serde(rename = "UNITY_CATALOG")]
    UnityCatalog,
    #[serde(rename = "DELTASHARING")]
    Deltasharing,

}

impl ToString for CatalogDataSourceFormat {
    fn to_string(&self) -> String {
        match self {
            Self::Delta => String::from("DELTA"),
            Self::Csv => String::from("CSV"),
            Self::Json => String::from("JSON"),
            Self::Avro => String::from("AVRO"),
            Self::Parquet => String::from("PARQUET"),
            Self::Orc => String::from("ORC"),
            Self::Text => String::from("TEXT"),
            Self::UnityCatalog => String::from("UNITY_CATALOG"),
            Self::Deltasharing => String::from("DELTASHARING"),
        }
    }
}

impl Default for CatalogDataSourceFormat {
    fn default() -> CatalogDataSourceFormat {
        Self::Delta
    }
}




