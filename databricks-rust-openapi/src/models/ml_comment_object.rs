use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// MlCommentObject : Comment details.



#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlCommentObject {
    #[serde(rename = "available_actions", skip_serializing_if = "Option::is_none")]
    pub available_actions: Option<Vec<crate::models::MlCommentActivityAction>>,
    /// User-provided comment on the action.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Creation time of the object, as a Unix timestamp in milliseconds.
    #[serde(rename = "creation_timestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<i64>,
    /// Comment ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Time of the object at last update, as a Unix timestamp in milliseconds.
    #[serde(rename = "last_updated_timestamp", skip_serializing_if = "Option::is_none")]
    pub last_updated_timestamp: Option<i64>,
    /// The username of the user that created the object.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}

impl MlCommentObject {
    /// Comment details.
    pub fn new() -> MlCommentObject {
        MlCommentObject {
            available_actions: None,
            comment: None,
            creation_timestamp: None,
            id: None,
            last_updated_timestamp: None,
            user_id: None,
        }
    }
}


