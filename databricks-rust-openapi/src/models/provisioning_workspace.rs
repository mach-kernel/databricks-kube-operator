use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningWorkspace {
    #[serde(rename = "cloud_resource_container", skip_serializing_if = "Option::is_none")]
    pub cloud_resource_container: Option<Box<crate::models::ProvisioningCloudResourceContainer>>,
    /// ID of the workspace's private access settings object. Only used for PrivateLink. You must specify this ID if you are using [AWS PrivateLink](https://Awsamazon.com/privatelink/) for either front-end (user-to-workspace connection), back-end (data plane to control plane connection), or both connection types.  Before configuring PrivateLink, read the [Databricks article about PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html).
    #[serde(rename = "private_access_settings_id", skip_serializing_if = "Option::is_none")]
    pub private_access_settings_id: Option<String>,
    /// The cloud name. This field always has the value `gcp`.
    #[serde(rename = "cloud", skip_serializing_if = "Option::is_none")]
    pub cloud: Option<String>,
    /// ID of the workspace's storage configuration object.
    #[serde(rename = "storage_configuration_id", skip_serializing_if = "Option::is_none")]
    pub storage_configuration_id: Option<String>,
    /// Time in epoch milliseconds when the workspace was created.
    #[serde(rename = "creation_time", skip_serializing_if = "Option::is_none")]
    pub creation_time: Option<i64>,
    /// ID of the key configuration for encrypting managed services.
    #[serde(rename = "managed_services_customer_managed_key_id", skip_serializing_if = "Option::is_none")]
    pub managed_services_customer_managed_key_id: Option<String>,
    /// The AWS region of the workspace data plane (for example, `us-west-2`).
    #[serde(rename = "aws_region", skip_serializing_if = "Option::is_none")]
    pub aws_region: Option<String>,
    #[serde(rename = "gcp_managed_network_config", skip_serializing_if = "Option::is_none")]
    pub gcp_managed_network_config: Option<Box<crate::models::ProvisioningGcpManagedNetworkConfig>>,
    /// ID of the key configuration for encrypting workspace storage.
    #[serde(rename = "storage_customer_managed_key_id", skip_serializing_if = "Option::is_none")]
    pub storage_customer_managed_key_id: Option<String>,
    /// The Google Cloud region of the workspace data plane in your Google account (for example, `us-east4`).
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// A unique integer ID for the workspace
    #[serde(rename = "workspace_id", skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<i64>,
    /// The network configuration ID that is attached to the workspace. This field is available only if the network is a customer-managed network.
    #[serde(rename = "network_id", skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    /// Message describing the current workspace status.
    #[serde(rename = "workspace_status_message", skip_serializing_if = "Option::is_none")]
    pub workspace_status_message: Option<String>,
    /// ID of the workspace's credential configuration object.
    #[serde(rename = "credentials_id", skip_serializing_if = "Option::is_none")]
    pub credentials_id: Option<String>,
    /// The deployment name defines part of the subdomain for the workspace. The workspace URL for web application and REST APIs is `<deployment-name>.Clouddatabricks.com`.  This value must be unique across all non-deleted deployments across all AWS regions.
    #[serde(rename = "deployment_name", skip_serializing_if = "Option::is_none")]
    pub deployment_name: Option<String>,
    #[serde(rename = "pricing_tier", skip_serializing_if = "Option::is_none")]
    pub pricing_tier: Option<crate::models::ProvisioningPricingTier>,
    /// Databricks account ID.
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "gke_config", skip_serializing_if = "Option::is_none")]
    pub gke_config: Option<Box<crate::models::ProvisioningGkeConfig>>,
    #[serde(rename = "workspace_status", skip_serializing_if = "Option::is_none")]
    pub workspace_status: Option<crate::models::ProvisioningWorkspaceStatus>,
    /// The human-readable name of the workspace.
    #[serde(rename = "workspace_name", skip_serializing_if = "Option::is_none")]
    pub workspace_name: Option<String>,
}

impl ProvisioningWorkspace {
    pub fn new() -> ProvisioningWorkspace {
        ProvisioningWorkspace {
            cloud_resource_container: None,
            private_access_settings_id: None,
            cloud: None,
            storage_configuration_id: None,
            creation_time: None,
            managed_services_customer_managed_key_id: None,
            aws_region: None,
            gcp_managed_network_config: None,
            storage_customer_managed_key_id: None,
            location: None,
            workspace_id: None,
            network_id: None,
            workspace_status_message: None,
            credentials_id: None,
            deployment_name: None,
            pricing_tier: None,
            account_id: None,
            gke_config: None,
            workspace_status: None,
            workspace_name: None,
        }
    }
}


