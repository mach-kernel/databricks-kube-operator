use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelinesOrigin {
    /// Materialization name.
    #[serde(rename = "materialization_name", skip_serializing_if = "Option::is_none")]
    pub materialization_name: Option<String>,
    /// The id of the pipeline. Globally unique.
    #[serde(rename = "pipeline_id", skip_serializing_if = "Option::is_none")]
    pub pipeline_id: Option<String>,
    /// The cloud provider, Eg., AWS or Azure.
    #[serde(rename = "cloud", skip_serializing_if = "Option::is_none")]
    pub cloud: Option<String>,
    /// The id of the request that caused an update.
    #[serde(rename = "request_id", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The Unity Catalog id of the MV or ST being updated.
    #[serde(rename = "uc_resource_id", skip_serializing_if = "Option::is_none")]
    pub uc_resource_id: Option<String>,
    /// The optional host name where the event was triggered
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// The name of a dataset. Unique within a pipeline.
    #[serde(rename = "dataset_name", skip_serializing_if = "Option::is_none")]
    pub dataset_name: Option<String>,
    /// The org id of the user. Unique within a cloud.
    #[serde(rename = "org_id", skip_serializing_if = "Option::is_none")]
    pub org_id: Option<i32>,
    /// The name of the flow. Not unique.
    #[serde(rename = "flow_name", skip_serializing_if = "Option::is_none")]
    pub flow_name: Option<String>,
    /// The cloud region.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The id of a (delta) table. Globally unique.
    #[serde(rename = "table_id", skip_serializing_if = "Option::is_none")]
    pub table_id: Option<String>,
    /// The id of a maintenance run. Globally unique.
    #[serde(rename = "maintenance_id", skip_serializing_if = "Option::is_none")]
    pub maintenance_id: Option<String>,
    /// The id of a batch. Unique within a flow.
    #[serde(rename = "batch_id", skip_serializing_if = "Option::is_none")]
    pub batch_id: Option<i32>,
    /// The id of the cluster where an execution happens. Unique within a region.
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<String>,
    /// The name of the pipeline. Not unique.
    #[serde(rename = "pipeline_name", skip_serializing_if = "Option::is_none")]
    pub pipeline_name: Option<String>,
    /// The id of the flow. Globally unique. Incremental queries will generally  reuse the same id while complete queries will have a new id per update. 
    #[serde(rename = "flow_id", skip_serializing_if = "Option::is_none")]
    pub flow_id: Option<String>,
    /// The id of an execution. Globally unique.
    #[serde(rename = "update_id", skip_serializing_if = "Option::is_none")]
    pub update_id: Option<String>,
}

impl PipelinesOrigin {
    pub fn new() -> PipelinesOrigin {
        PipelinesOrigin {
            materialization_name: None,
            pipeline_id: None,
            cloud: None,
            request_id: None,
            uc_resource_id: None,
            host: None,
            dataset_name: None,
            org_id: None,
            flow_name: None,
            region: None,
            table_id: None,
            maintenance_id: None,
            batch_id: None,
            cluster_id: None,
            pipeline_name: None,
            flow_id: None,
            update_id: None,
        }
    }
}


