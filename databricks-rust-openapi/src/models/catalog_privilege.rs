use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CatalogPrivilege {
    #[serde(rename = "READ_PRIVATE_FILES")]
    ReadPrivateFiles,
    #[serde(rename = "WRITE_PRIVATE_FILES")]
    WritePrivateFiles,
    #[serde(rename = "CREATE")]
    Create,
    #[serde(rename = "USAGE")]
    Usage,
    #[serde(rename = "USE_CATALOG")]
    UseCatalog,
    #[serde(rename = "USE_SCHEMA")]
    UseSchema,
    #[serde(rename = "CREATE_SCHEMA")]
    CreateSchema,
    #[serde(rename = "CREATE_VIEW")]
    CreateView,
    #[serde(rename = "CREATE_EXTERNAL_TABLE")]
    CreateExternalTable,
    #[serde(rename = "CREATE_MATERIALIZED_VIEW")]
    CreateMaterializedView,
    #[serde(rename = "CREATE_FUNCTION")]
    CreateFunction,
    #[serde(rename = "CREATE_MODEL")]
    CreateModel,
    #[serde(rename = "CREATE_CATALOG")]
    CreateCatalog,
    #[serde(rename = "CREATE_MANAGED_STORAGE")]
    CreateManagedStorage,
    #[serde(rename = "CREATE_EXTERNAL_LOCATION")]
    CreateExternalLocation,
    #[serde(rename = "CREATE_STORAGE_CREDENTIAL")]
    CreateStorageCredential,
    #[serde(rename = "CREATE_SHARE")]
    CreateShare,
    #[serde(rename = "CREATE_RECIPIENT")]
    CreateRecipient,
    #[serde(rename = "CREATE_PROVIDER")]
    CreateProvider,
    #[serde(rename = "USE_SHARE")]
    UseShare,
    #[serde(rename = "USE_RECIPIENT")]
    UseRecipient,
    #[serde(rename = "USE_PROVIDER")]
    UseProvider,
    #[serde(rename = "USE_MARKETPLACE_ASSETS")]
    UseMarketplaceAssets,
    #[serde(rename = "SET_SHARE_PERMISSION")]
    SetSharePermission,
    #[serde(rename = "SELECT")]
    Select,
    #[serde(rename = "MODIFY")]
    Modify,
    #[serde(rename = "REFRESH")]
    Refresh,
    #[serde(rename = "EXECUTE")]
    Execute,
    #[serde(rename = "READ_FILES")]
    ReadFiles,
    #[serde(rename = "WRITE_FILES")]
    WriteFiles,
    #[serde(rename = "CREATE_TABLE")]
    CreateTable,
    #[serde(rename = "ALL_PRIVILEGES")]
    AllPrivileges,
    #[serde(rename = "CREATE_CONNECTION")]
    CreateConnection,
    #[serde(rename = "USE_CONNECTION")]
    UseConnection,
    #[serde(rename = "APPLY_TAG")]
    ApplyTag,
    #[serde(rename = "CREATE_FOREIGN_CATALOG")]
    CreateForeignCatalog,

}

impl ToString for CatalogPrivilege {
    fn to_string(&self) -> String {
        match self {
            Self::ReadPrivateFiles => String::from("READ_PRIVATE_FILES"),
            Self::WritePrivateFiles => String::from("WRITE_PRIVATE_FILES"),
            Self::Create => String::from("CREATE"),
            Self::Usage => String::from("USAGE"),
            Self::UseCatalog => String::from("USE_CATALOG"),
            Self::UseSchema => String::from("USE_SCHEMA"),
            Self::CreateSchema => String::from("CREATE_SCHEMA"),
            Self::CreateView => String::from("CREATE_VIEW"),
            Self::CreateExternalTable => String::from("CREATE_EXTERNAL_TABLE"),
            Self::CreateMaterializedView => String::from("CREATE_MATERIALIZED_VIEW"),
            Self::CreateFunction => String::from("CREATE_FUNCTION"),
            Self::CreateModel => String::from("CREATE_MODEL"),
            Self::CreateCatalog => String::from("CREATE_CATALOG"),
            Self::CreateManagedStorage => String::from("CREATE_MANAGED_STORAGE"),
            Self::CreateExternalLocation => String::from("CREATE_EXTERNAL_LOCATION"),
            Self::CreateStorageCredential => String::from("CREATE_STORAGE_CREDENTIAL"),
            Self::CreateShare => String::from("CREATE_SHARE"),
            Self::CreateRecipient => String::from("CREATE_RECIPIENT"),
            Self::CreateProvider => String::from("CREATE_PROVIDER"),
            Self::UseShare => String::from("USE_SHARE"),
            Self::UseRecipient => String::from("USE_RECIPIENT"),
            Self::UseProvider => String::from("USE_PROVIDER"),
            Self::UseMarketplaceAssets => String::from("USE_MARKETPLACE_ASSETS"),
            Self::SetSharePermission => String::from("SET_SHARE_PERMISSION"),
            Self::Select => String::from("SELECT"),
            Self::Modify => String::from("MODIFY"),
            Self::Refresh => String::from("REFRESH"),
            Self::Execute => String::from("EXECUTE"),
            Self::ReadFiles => String::from("READ_FILES"),
            Self::WriteFiles => String::from("WRITE_FILES"),
            Self::CreateTable => String::from("CREATE_TABLE"),
            Self::AllPrivileges => String::from("ALL_PRIVILEGES"),
            Self::CreateConnection => String::from("CREATE_CONNECTION"),
            Self::UseConnection => String::from("USE_CONNECTION"),
            Self::ApplyTag => String::from("APPLY_TAG"),
            Self::CreateForeignCatalog => String::from("CREATE_FOREIGN_CATALOG"),
        }
    }
}

impl Default for CatalogPrivilege {
    fn default() -> CatalogPrivilege {
        Self::ReadPrivateFiles
    }
}




