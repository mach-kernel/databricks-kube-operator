use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JobsRunLifeCycleState : This describes an enum

/// This describes an enum
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobsRunLifeCycleState {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "RUNNING")]
    Running,
    #[serde(rename = "TERMINATING")]
    Terminating,
    #[serde(rename = "TERMINATED")]
    Terminated,
    #[serde(rename = "SKIPPED")]
    Skipped,
    #[serde(rename = "INTERNAL_ERROR")]
    InternalError,
    #[serde(rename = "BLOCKED")]
    Blocked,
    #[serde(rename = "WAITING_FOR_RETRY")]
    WaitingForRetry,

}

impl ToString for JobsRunLifeCycleState {
    fn to_string(&self) -> String {
        match self {
            Self::Pending => String::from("PENDING"),
            Self::Running => String::from("RUNNING"),
            Self::Terminating => String::from("TERMINATING"),
            Self::Terminated => String::from("TERMINATED"),
            Self::Skipped => String::from("SKIPPED"),
            Self::InternalError => String::from("INTERNAL_ERROR"),
            Self::Blocked => String::from("BLOCKED"),
            Self::WaitingForRetry => String::from("WAITING_FOR_RETRY"),
        }
    }
}

impl Default for JobsRunLifeCycleState {
    fn default() -> JobsRunLifeCycleState {
        Self::Pending
    }
}




