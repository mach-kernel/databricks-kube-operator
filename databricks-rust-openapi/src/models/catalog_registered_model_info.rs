use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogRegisteredModelInfo {
    /// The identifier of the user who owns the registered model
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<crate::models::CatalogRegisteredModelAlias>>,
    /// The name of the catalog where the schema and the registered model reside
    #[serde(rename = "catalog_name", skip_serializing_if = "Option::is_none")]
    pub catalog_name: Option<String>,
    /// The three-level (fully qualified) name of the registered model
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// The unique identifier of the metastore
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// The identifier of the user who created the registered model
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// The name of the schema where the registered model resides
    #[serde(rename = "schema_name", skip_serializing_if = "Option::is_none")]
    pub schema_name: Option<String>,
    /// The name of the registered model
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Last-update timestamp of the registered model in milliseconds since the Unix epoch
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// Creation timestamp of the registered model in milliseconds since the Unix epoch
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// The comment attached to the registered model
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// The identifier of the user who updated the registered model last time
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// The storage location on the cloud under which model version data files are stored
    #[serde(rename = "storage_location", skip_serializing_if = "Option::is_none")]
    pub storage_location: Option<String>,
}

impl CatalogRegisteredModelInfo {
    pub fn new() -> CatalogRegisteredModelInfo {
        CatalogRegisteredModelInfo {
            owner: None,
            aliases: None,
            catalog_name: None,
            full_name: None,
            metastore_id: None,
            created_by: None,
            schema_name: None,
            name: None,
            updated_at: None,
            created_at: None,
            comment: None,
            updated_by: None,
            storage_location: None,
        }
    }
}


