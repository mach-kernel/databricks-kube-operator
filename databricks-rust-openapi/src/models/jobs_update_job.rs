use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize, Default)]
pub struct JobsUpdateJob {
    #[serde(rename = "fields_to_remove", skip_serializing_if = "Option::is_none")]
    pub fields_to_remove: Option<Vec<String>>,
    /// The canonical identifier of the job to update. This field is required.
    #[serde(rename = "job_id")]
    pub job_id: i64,
    /// The new settings for the job.  Top-level fields specified in `new_settings` are completely replaced, except for arrays which are merged. That is, new and existing entries are completely replaced based on the respective key fields, Ie. `task_key` or `job_cluster_key`, while previous entries are kept.  Partially updating nested fields is not supported.  Changes to the field `JobSettings.timeout_seconds` are applied to active runs. Changes to other fields are applied to future runs only. 
    #[serde(rename = "new_settings", skip_serializing_if = "Option::is_none")]
    pub new_settings: Option<Box<crate::models::JobsJobSettings>>,
}

impl JobsUpdateJob {
    pub fn new(job_id: i64) -> JobsUpdateJob {
        JobsUpdateJob {
            fields_to_remove: None,
            job_id,
            new_settings: None,
        }
    }
}


