use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// JobsRunResultState : This describes an enum

/// This describes an enum
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobsRunResultState {
    #[serde(rename = "SUCCESS")]
    Success,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "TIMEDOUT")]
    Timedout,
    #[serde(rename = "CANCELED")]
    Canceled,
    #[serde(rename = "MAXIMUM_CONCURRENT_RUNS_REACHED")]
    MaximumConcurrentRunsReached,
    #[serde(rename = "EXCLUDED")]
    Excluded,
    #[serde(rename = "SUCCESS_WITH_FAILURES")]
    SuccessWithFailures,
    #[serde(rename = "UPSTREAM_FAILED")]
    UpstreamFailed,
    #[serde(rename = "UPSTREAM_CANCELED")]
    UpstreamCanceled,

}

impl ToString for JobsRunResultState {
    fn to_string(&self) -> String {
        match self {
            Self::Success => String::from("SUCCESS"),
            Self::Failed => String::from("FAILED"),
            Self::Timedout => String::from("TIMEDOUT"),
            Self::Canceled => String::from("CANCELED"),
            Self::MaximumConcurrentRunsReached => String::from("MAXIMUM_CONCURRENT_RUNS_REACHED"),
            Self::Excluded => String::from("EXCLUDED"),
            Self::SuccessWithFailures => String::from("SUCCESS_WITH_FAILURES"),
            Self::UpstreamFailed => String::from("UPSTREAM_FAILED"),
            Self::UpstreamCanceled => String::from("UPSTREAM_CANCELED"),
        }
    }
}

impl Default for JobsRunResultState {
    fn default() -> JobsRunResultState {
        Self::Success
    }
}




