use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningUpsertPrivateAccessSettingsRequest {
    #[serde(rename = "allowed_vpc_endpoint_ids", skip_serializing_if = "Option::is_none")]
    pub allowed_vpc_endpoint_ids: Option<Vec<String>>,
    #[serde(rename = "private_access_level", skip_serializing_if = "Option::is_none")]
    pub private_access_level: Option<crate::models::ProvisioningPrivateAccessLevel>,
    /// The human-readable name of the private access settings object.
    #[serde(rename = "private_access_settings_name")]
    pub private_access_settings_name: String,
    /// Determines if the workspace can be accessed over public internet. For fully private workspaces, you can optionally specify `false`, but only if you implement both the front-end and the back-end PrivateLink connections. Otherwise, specify `true`, which means that public access is enabled.
    #[serde(rename = "public_access_enabled", skip_serializing_if = "Option::is_none")]
    pub public_access_enabled: Option<bool>,
    /// The cloud region for workspaces associated with this private access settings object.
    #[serde(rename = "region")]
    pub region: String,
}

impl ProvisioningUpsertPrivateAccessSettingsRequest {
    pub fn new(private_access_settings_name: String, region: String) -> ProvisioningUpsertPrivateAccessSettingsRequest {
        ProvisioningUpsertPrivateAccessSettingsRequest {
            allowed_vpc_endpoint_ids: None,
            private_access_level: None,
            private_access_settings_name,
            public_access_enabled: None,
            region,
        }
    }
}


