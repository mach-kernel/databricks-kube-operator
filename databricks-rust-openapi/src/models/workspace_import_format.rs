use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// WorkspaceImportFormat : This specifies the format of the file to be imported.  The value is case sensitive.  - `AUTO`: The item is imported depending on an analysis of the item's extension and    the header content provided in the request. If the item is imported as a notebook,    then the item's extension is automatically removed. - `SOURCE`: The notebook is imported as source code. - `HTML`: The notebook is imported as an HTML file. - `JUPYTER`: The notebook is imported as a Jupyter/IPython Notebook file. - `DBC`: The notebook is imported in Databricks archive format. Required for directories. - `R_MARKDOWN`: The notebook is imported from R Markdown format. 

/// This specifies the format of the file to be imported.  The value is case sensitive.  - `AUTO`: The item is imported depending on an analysis of the item's extension and    the header content provided in the request. If the item is imported as a notebook,    then the item's extension is automatically removed. - `SOURCE`: The notebook is imported as source code. - `HTML`: The notebook is imported as an HTML file. - `JUPYTER`: The notebook is imported as a Jupyter/IPython Notebook file. - `DBC`: The notebook is imported in Databricks archive format. Required for directories. - `R_MARKDOWN`: The notebook is imported from R Markdown format. 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WorkspaceImportFormat {
    #[serde(rename = "SOURCE")]
    Source,
    #[serde(rename = "HTML")]
    Html,
    #[serde(rename = "JUPYTER")]
    Jupyter,
    #[serde(rename = "DBC")]
    Dbc,
    #[serde(rename = "R_MARKDOWN")]
    RMarkdown,
    #[serde(rename = "AUTO")]
    Auto,

}

impl ToString for WorkspaceImportFormat {
    fn to_string(&self) -> String {
        match self {
            Self::Source => String::from("SOURCE"),
            Self::Html => String::from("HTML"),
            Self::Jupyter => String::from("JUPYTER"),
            Self::Dbc => String::from("DBC"),
            Self::RMarkdown => String::from("R_MARKDOWN"),
            Self::Auto => String::from("AUTO"),
        }
    }
}

impl Default for WorkspaceImportFormat {
    fn default() -> WorkspaceImportFormat {
        Self::Source
    }
}




