use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogModelVersionInfo {
    /// The name of the catalog containing the model version
    #[serde(rename = "catalog_name", skip_serializing_if = "Option::is_none")]
    pub catalog_name: Option<String>,
    /// ID of the Databricks workspace containing the MLflow run that generated this model             version, if applicable
    #[serde(rename = "run_workspace_id", skip_serializing_if = "Option::is_none")]
    pub run_workspace_id: Option<i32>,
    /// The unique identifier of the metastore containing the model version
    #[serde(rename = "metastore_id", skip_serializing_if = "Option::is_none")]
    pub metastore_id: Option<String>,
    /// The unique identifier of the model version
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The identifier of the user who created the model version
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    /// The name of the schema containing the model version, relative to parent catalog
    #[serde(rename = "schema_name", skip_serializing_if = "Option::is_none")]
    pub schema_name: Option<String>,
    /// The name of the parent registered model of the model version, relative to parent schema
    #[serde(rename = "model_name", skip_serializing_if = "Option::is_none")]
    pub model_name: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// Current status of the model version. Newly created model versions start in             PENDING_REGISTRATION status, then move to READY status once the model version files are uploaded and             the model version is finalized. Only model versions in READY status can be loaded for inference or             served.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// URI indicating the location of the source artifacts (files) for the model version
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// MLflow run ID used when creating the model version, if ``source`` was generated by an                           experiment run stored in an MLflow tracking server
    #[serde(rename = "run_id", skip_serializing_if = "Option::is_none")]
    pub run_id: Option<String>,
    /// Integer model version number, used to reference the model version in API requests.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    /// The comment attached to the model version
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// The identifier of the user who updated the model version last time
    #[serde(rename = "updated_by", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// The storage location on the cloud under which model version data files are stored
    #[serde(rename = "storage_location", skip_serializing_if = "Option::is_none")]
    pub storage_location: Option<String>,
    #[serde(rename = "model_version_dependencies", skip_serializing_if = "Option::is_none")]
    pub model_version_dependencies: Option<Vec<crate::models::CatalogDependency>>,
}

impl CatalogModelVersionInfo {
    pub fn new() -> CatalogModelVersionInfo {
        CatalogModelVersionInfo {
            catalog_name: None,
            run_workspace_id: None,
            metastore_id: None,
            id: None,
            created_by: None,
            schema_name: None,
            model_name: None,
            updated_at: None,
            status: None,
            source: None,
            run_id: None,
            version: None,
            created_at: None,
            comment: None,
            updated_by: None,
            storage_location: None,
            model_version_dependencies: None,
        }
    }
}

/// Current status of the model version. Newly created model versions start in             PENDING_REGISTRATION status, then move to READY status once the model version files are uploaded and             the model version is finalized. Only model versions in READY status can be loaded for inference or             served.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING_REGISTRATION")]
    PendingRegistration,
    #[serde(rename = "FAILED_REGISTRATION")]
    FailedRegistration,
    #[serde(rename = "READY")]
    Ready,
}

impl Default for Status {
    fn default() -> Status {
        Self::PendingRegistration
    }
}

