use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CatalogSecurableType : The type of Unity Catalog securable

/// The type of Unity Catalog securable
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CatalogSecurableType {
    #[serde(rename = "catalog")]
    Catalog,
    #[serde(rename = "schema")]
    Schema,
    #[serde(rename = "table")]
    Table,
    #[serde(rename = "storage_credential")]
    StorageCredential,
    #[serde(rename = "external_location")]
    ExternalLocation,
    #[serde(rename = "function")]
    Function,
    #[serde(rename = "share")]
    Share,
    #[serde(rename = "provider")]
    Provider,
    #[serde(rename = "recipient")]
    Recipient,
    #[serde(rename = "metastore")]
    Metastore,
    #[serde(rename = "pipeline")]
    Pipeline,
    #[serde(rename = "connection")]
    Connection,

}

impl ToString for CatalogSecurableType {
    fn to_string(&self) -> String {
        match self {
            Self::Catalog => String::from("catalog"),
            Self::Schema => String::from("schema"),
            Self::Table => String::from("table"),
            Self::StorageCredential => String::from("storage_credential"),
            Self::ExternalLocation => String::from("external_location"),
            Self::Function => String::from("function"),
            Self::Share => String::from("share"),
            Self::Provider => String::from("provider"),
            Self::Recipient => String::from("recipient"),
            Self::Metastore => String::from("metastore"),
            Self::Pipeline => String::from("pipeline"),
            Self::Connection => String::from("connection"),
        }
    }
}

impl Default for CatalogSecurableType {
    fn default() -> CatalogSecurableType {
        Self::Catalog
    }
}




