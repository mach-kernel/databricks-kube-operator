use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogUpdateMetastore {
    /// The organization name of a Delta Sharing entity, to be used in Databricks-to-Databricks Delta Sharing as the official name.
    #[serde(rename = "delta_sharing_organization_name", skip_serializing_if = "Option::is_none")]
    pub delta_sharing_organization_name: Option<String>,
    /// The lifetime of delta sharing recipient token in seconds.
    #[serde(rename = "delta_sharing_recipient_token_lifetime_in_seconds", skip_serializing_if = "Option::is_none")]
    pub delta_sharing_recipient_token_lifetime_in_seconds: Option<i64>,
    /// The scope of Delta Sharing enabled for the metastore.
    #[serde(rename = "delta_sharing_scope", skip_serializing_if = "Option::is_none")]
    pub delta_sharing_scope: Option<DeltaSharingScope>,
    /// The user-specified name of the metastore.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The owner of the metastore.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Privilege model version of the metastore, of the form `Majorminor` (e.g., `1.0`).
    #[serde(rename = "privilege_model_version", skip_serializing_if = "Option::is_none")]
    pub privilege_model_version: Option<String>,
    /// UUID of storage credential to access the metastore storage_root.
    #[serde(rename = "storage_root_credential_id", skip_serializing_if = "Option::is_none")]
    pub storage_root_credential_id: Option<String>,
}

impl CatalogUpdateMetastore {
    pub fn new() -> CatalogUpdateMetastore {
        CatalogUpdateMetastore {
            delta_sharing_organization_name: None,
            delta_sharing_recipient_token_lifetime_in_seconds: None,
            delta_sharing_scope: None,
            name: None,
            owner: None,
            privilege_model_version: None,
            storage_root_credential_id: None,
        }
    }
}

/// The scope of Delta Sharing enabled for the metastore.
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeltaSharingScope {
    #[serde(rename = "INTERNAL")]
    Internal,
    #[serde(rename = "INTERNAL_AND_EXTERNAL")]
    InternalAndExternal,
}

impl Default for DeltaSharingScope {
    fn default() -> DeltaSharingScope {
        Self::Internal
    }
}

