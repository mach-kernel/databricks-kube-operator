use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComputeTerminationReason {
    /// status code indicating why the cluster was terminated
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    /// list of parameters that provide additional information about why the cluster was terminated
    #[serde(rename = "parameters", default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, String>>,
    /// type of the termination
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl ComputeTerminationReason {
    pub fn new() -> ComputeTerminationReason {
        ComputeTerminationReason {
            code: None,
            parameters: None,
            r#type: None,
        }
    }
}

/// status code indicating why the cluster was terminated
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Code {
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "USER_REQUEST")]
    UserRequest,
    #[serde(rename = "JOB_FINISHED")]
    JobFinished,
    #[serde(rename = "INACTIVITY")]
    Inactivity,
    #[serde(rename = "CLOUD_PROVIDER_SHUTDOWN")]
    CloudProviderShutdown,
    #[serde(rename = "COMMUNICATION_LOST")]
    CommunicationLost,
    #[serde(rename = "CLOUD_PROVIDER_LAUNCH_FAILURE")]
    CloudProviderLaunchFailure,
    #[serde(rename = "INIT_SCRIPT_FAILURE")]
    InitScriptFailure,
    #[serde(rename = "SPARK_STARTUP_FAILURE")]
    SparkStartupFailure,
    #[serde(rename = "INVALID_ARGUMENT")]
    InvalidArgument,
    #[serde(rename = "UNEXPECTED_LAUNCH_FAILURE")]
    UnexpectedLaunchFailure,
    #[serde(rename = "INTERNAL_ERROR")]
    InternalError,
    #[serde(rename = "INSTANCE_UNREACHABLE")]
    InstanceUnreachable,
    #[serde(rename = "REQUEST_REJECTED")]
    RequestRejected,
    #[serde(rename = "TRIAL_EXPIRED")]
    TrialExpired,
    #[serde(rename = "DRIVER_UNREACHABLE")]
    DriverUnreachable,
    #[serde(rename = "SPARK_ERROR")]
    SparkError,
    #[serde(rename = "DRIVER_UNRESPONSIVE")]
    DriverUnresponsive,
    #[serde(rename = "METASTORE_COMPONENT_UNHEALTHY")]
    MetastoreComponentUnhealthy,
    #[serde(rename = "DBFS_COMPONENT_UNHEALTHY")]
    DbfsComponentUnhealthy,
    #[serde(rename = "EXECUTION_COMPONENT_UNHEALTHY")]
    ExecutionComponentUnhealthy,
    #[serde(rename = "AZURE_RESOURCE_MANAGER_THROTTLING")]
    AzureResourceManagerThrottling,
    #[serde(rename = "AZURE_RESOURCE_PROVIDER_THROTTLING")]
    AzureResourceProviderThrottling,
    #[serde(rename = "NETWORK_CONFIGURATION_FAILURE")]
    NetworkConfigurationFailure,
    #[serde(rename = "CONTAINER_LAUNCH_FAILURE")]
    ContainerLaunchFailure,
    #[serde(rename = "INSTANCE_POOL_CLUSTER_FAILURE")]
    InstancePoolClusterFailure,
    #[serde(rename = "SKIPPED_SLOW_NODES")]
    SkippedSlowNodes,
    #[serde(rename = "ATTACH_PROJECT_FAILURE")]
    AttachProjectFailure,
    #[serde(rename = "UPDATE_INSTANCE_PROFILE_FAILURE")]
    UpdateInstanceProfileFailure,
    #[serde(rename = "DATABASE_CONNECTION_FAILURE")]
    DatabaseConnectionFailure,
    #[serde(rename = "REQUEST_THROTTLED")]
    RequestThrottled,
    #[serde(rename = "SELF_BOOTSTRAP_FAILURE")]
    SelfBootstrapFailure,
    #[serde(rename = "GLOBAL_INIT_SCRIPT_FAILURE")]
    GlobalInitScriptFailure,
    #[serde(rename = "SLOW_IMAGE_DOWNLOAD")]
    SlowImageDownload,
    #[serde(rename = "INVALID_SPARK_IMAGE")]
    InvalidSparkImage,
    #[serde(rename = "NPIP_TUNNEL_TOKEN_FAILURE")]
    NpipTunnelTokenFailure,
    #[serde(rename = "HIVE_METASTORE_PROVISIONING_FAILURE")]
    HiveMetastoreProvisioningFailure,
    #[serde(rename = "AZURE_INVALID_DEPLOYMENT_TEMPLATE")]
    AzureInvalidDeploymentTemplate,
    #[serde(rename = "AZURE_UNEXPECTED_DEPLOYMENT_TEMPLATE_FAILURE")]
    AzureUnexpectedDeploymentTemplateFailure,
    #[serde(rename = "SUBNET_EXHAUSTED_FAILURE")]
    SubnetExhaustedFailure,
    #[serde(rename = "BOOTSTRAP_TIMEOUT")]
    BootstrapTimeout,
    #[serde(rename = "STORAGE_DOWNLOAD_FAILURE")]
    StorageDownloadFailure,
    #[serde(rename = "CONTROL_PLANE_REQUEST_FAILURE")]
    ControlPlaneRequestFailure,
    #[serde(rename = "BOOTSTRAP_TIMEOUT_CLOUD_PROVIDER_EXCEPTION")]
    BootstrapTimeoutCloudProviderException,
    #[serde(rename = "AWS_INSUFFICIENT_INSTANCE_CAPACITY_FAILURE")]
    AwsInsufficientInstanceCapacityFailure,
    #[serde(rename = "DOCKER_IMAGE_PULL_FAILURE")]
    DockerImagePullFailure,
    #[serde(rename = "AZURE_VNET_CONFIGURATION_FAILURE")]
    AzureVnetConfigurationFailure,
    #[serde(rename = "NPIP_TUNNEL_SETUP_FAILURE")]
    NpipTunnelSetupFailure,
    #[serde(rename = "AWS_AUTHORIZATION_FAILURE")]
    AwsAuthorizationFailure,
    #[serde(rename = "NEPHOS_RESOURCE_MANAGEMENT")]
    NephosResourceManagement,
    #[serde(rename = "STS_CLIENT_SETUP_FAILURE")]
    StsClientSetupFailure,
    #[serde(rename = "SECURITY_DAEMON_REGISTRATION_EXCEPTION")]
    SecurityDaemonRegistrationException,
    #[serde(rename = "AWS_REQUEST_LIMIT_EXCEEDED")]
    AwsRequestLimitExceeded,
    #[serde(rename = "AWS_INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET_FAILURE")]
    AwsInsufficientFreeAddressesInSubnetFailure,
    #[serde(rename = "AWS_UNSUPPORTED_FAILURE")]
    AwsUnsupportedFailure,
    #[serde(rename = "AZURE_QUOTA_EXCEEDED_EXCEPTION")]
    AzureQuotaExceededException,
    #[serde(rename = "AZURE_OPERATION_NOT_ALLOWED_EXCEPTION")]
    AzureOperationNotAllowedException,
    #[serde(rename = "NFS_MOUNT_FAILURE")]
    NfsMountFailure,
    #[serde(rename = "K8S_AUTOSCALING_FAILURE")]
    K8SAutoscalingFailure,
    #[serde(rename = "K8S_DBR_CLUSTER_LAUNCH_TIMEOUT")]
    K8SDbrClusterLaunchTimeout,
    #[serde(rename = "SPARK_IMAGE_DOWNLOAD_FAILURE")]
    SparkImageDownloadFailure,
    #[serde(rename = "AZURE_VM_EXTENSION_FAILURE")]
    AzureVmExtensionFailure,
    #[serde(rename = "WORKSPACE_CANCELLED_ERROR")]
    WorkspaceCancelledError,
    #[serde(rename = "AWS_MAX_SPOT_INSTANCE_COUNT_EXCEEDED_FAILURE")]
    AwsMaxSpotInstanceCountExceededFailure,
    #[serde(rename = "TEMPORARILY_UNAVAILABLE")]
    TemporarilyUnavailable,
    #[serde(rename = "WORKER_SETUP_FAILURE")]
    WorkerSetupFailure,
    #[serde(rename = "IP_EXHAUSTION_FAILURE")]
    IpExhaustionFailure,
    #[serde(rename = "GCP_QUOTA_EXCEEDED")]
    GcpQuotaExceeded,
    #[serde(rename = "CLOUD_PROVIDER_RESOURCE_STOCKOUT")]
    CloudProviderResourceStockout,
    #[serde(rename = "GCP_SERVICE_ACCOUNT_DELETED")]
    GcpServiceAccountDeleted,
    #[serde(rename = "AZURE_BYOK_KEY_PERMISSION_FAILURE")]
    AzureByokKeyPermissionFailure,
    #[serde(rename = "SPOT_INSTANCE_TERMINATION")]
    SpotInstanceTermination,
    #[serde(rename = "AZURE_EPHEMERAL_DISK_FAILURE")]
    AzureEphemeralDiskFailure,
    #[serde(rename = "ABUSE_DETECTED")]
    AbuseDetected,
    #[serde(rename = "IMAGE_PULL_PERMISSION_DENIED")]
    ImagePullPermissionDenied,
    #[serde(rename = "WORKSPACE_CONFIGURATION_ERROR")]
    WorkspaceConfigurationError,
    #[serde(rename = "SECRET_RESOLUTION_ERROR")]
    SecretResolutionError,
    #[serde(rename = "UNSUPPORTED_INSTANCE_TYPE")]
    UnsupportedInstanceType,
    #[serde(rename = "CLOUD_PROVIDER_DISK_SETUP_FAILURE")]
    CloudProviderDiskSetupFailure,
}

impl Default for Code {
    fn default() -> Code {
        Self::Unknown
    }
}
/// type of the termination
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SUCCESS")]
    Success,
    #[serde(rename = "CLIENT_ERROR")]
    ClientError,
    #[serde(rename = "SERVICE_FAULT")]
    ServiceFault,
    #[serde(rename = "CLOUD_FAILURE")]
    CloudFailure,
}

impl Default for Type {
    fn default() -> Type {
        Self::Success
    }
}

