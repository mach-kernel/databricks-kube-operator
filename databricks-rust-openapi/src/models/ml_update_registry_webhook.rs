use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MlUpdateRegistryWebhook {
    /// User-specified description for the webhook.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<crate::models::MlRegistryWebhookEvent>>,
    #[serde(rename = "http_url_spec", skip_serializing_if = "Option::is_none")]
    pub http_url_spec: Option<Box<crate::models::MlHttpUrlSpec>>,
    /// Webhook ID
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "job_spec", skip_serializing_if = "Option::is_none")]
    pub job_spec: Option<Box<crate::models::MlJobSpec>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<crate::models::MlRegistryWebhookStatus>,
}

impl MlUpdateRegistryWebhook {
    pub fn new(id: String) -> MlUpdateRegistryWebhook {
        MlUpdateRegistryWebhook {
            description: None,
            events: None,
            http_url_spec: None,
            id,
            job_spec: None,
            status: None,
        }
    }
}


