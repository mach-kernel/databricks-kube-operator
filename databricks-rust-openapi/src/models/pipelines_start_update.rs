use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelinesStartUpdate {
    /// 
    #[serde(rename = "cause", skip_serializing_if = "Option::is_none")]
    pub cause: Option<Cause>,
    /// If true, this update will reset all tables before running.
    #[serde(rename = "full_refresh", skip_serializing_if = "Option::is_none")]
    pub full_refresh: Option<bool>,
    #[serde(rename = "full_refresh_selection", skip_serializing_if = "Option::is_none")]
    pub full_refresh_selection: Option<Vec<String>>,
    #[serde(rename = "refresh_selection", skip_serializing_if = "Option::is_none")]
    pub refresh_selection: Option<Vec<String>>,
}

impl PipelinesStartUpdate {
    pub fn new() -> PipelinesStartUpdate {
        PipelinesStartUpdate {
            cause: None,
            full_refresh: None,
            full_refresh_selection: None,
            refresh_selection: None,
        }
    }
}

/// 
#[derive(JsonSchema, Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cause {
    #[serde(rename = "API_CALL")]
    ApiCall,
    #[serde(rename = "RETRY_ON_FAILURE")]
    RetryOnFailure,
    #[serde(rename = "SERVICE_UPGRADE")]
    ServiceUpgrade,
    #[serde(rename = "SCHEMA_CHANGE")]
    SchemaChange,
    #[serde(rename = "JOB_TASK")]
    JobTask,
    #[serde(rename = "USER_ACTION")]
    UserAction,
}

impl Default for Cause {
    fn default() -> Cause {
        Self::ApiCall
    }
}

