use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IamPrincipalOutput {
    /// The display name of the principal.
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The group name of the groupl. Present only if the principal is a group.
    #[serde(rename = "group_name", skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    /// The unique, opaque id of the principal.
    #[serde(rename = "principal_id", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<i64>,
    /// The name of the service principal. Present only if the principal is a service principal.
    #[serde(rename = "service_principal_name", skip_serializing_if = "Option::is_none")]
    pub service_principal_name: Option<String>,
    /// The username of the user. Present only if the principal is a user.
    #[serde(rename = "user_name", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
}

impl IamPrincipalOutput {
    pub fn new() -> IamPrincipalOutput {
        IamPrincipalOutput {
            display_name: None,
            group_name: None,
            principal_id: None,
            service_principal_name: None,
            user_name: None,
        }
    }
}


