use schemars::JsonSchema;
/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(JsonSchema, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CatalogCreateCatalog {
    /// User-provided free-form text description.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// The name of the connection to an external data source.
    #[serde(rename = "connection_name", skip_serializing_if = "Option::is_none")]
    pub connection_name: Option<String>,
    /// Name of catalog.
    #[serde(rename = "name")]
    pub name: String,
    /// A map of key-value properties attached to the securable.
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// The name of delta sharing provider.  A Delta Sharing catalog is a catalog that is based on a Delta share on a remote sharing server. 
    #[serde(rename = "provider_name", skip_serializing_if = "Option::is_none")]
    pub provider_name: Option<String>,
    /// The name of the share under the share provider.
    #[serde(rename = "share_name", skip_serializing_if = "Option::is_none")]
    pub share_name: Option<String>,
    /// Storage root URL for managed tables within catalog.
    #[serde(rename = "storage_root", skip_serializing_if = "Option::is_none")]
    pub storage_root: Option<String>,
}

impl CatalogCreateCatalog {
    pub fn new(name: String) -> CatalogCreateCatalog {
        CatalogCreateCatalog {
            comment: None,
            connection_name: None,
            name,
            properties: None,
            provider_name: None,
            share_name: None,
            storage_root: None,
        }
    }
}


