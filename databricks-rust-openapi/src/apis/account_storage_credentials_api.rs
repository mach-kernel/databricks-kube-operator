/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`account_storage_credentialscreate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountStorageCredentialscreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_storage_credentialsdelete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountStorageCredentialsdeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_storage_credentialsget`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountStorageCredentialsgetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_storage_credentialslist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountStorageCredentialslistError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_storage_credentialsupdate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountStorageCredentialsupdateError {
    UnknownValue(serde_json::Value),
}


/// Creates a new storage credential. The request object is specific to the cloud:    * **AwsIamRole** for AWS credentials   * **AzureServicePrincipal** for Azure credentials   * **GcpServiceAcountKey** for GCP credentials.  The caller must be a metastore admin and have the **CREATE_STORAGE_CREDENTIAL** privilege on the metastore. 
pub async fn account_storage_credentialscreate(configuration: &configuration::Configuration, account_id: serde_json::Value, metastore_id: serde_json::Value, catalog_accounts_create_storage_credential: Option<crate::models::CatalogAccountsCreateStorageCredential>) -> Result<crate::models::CatalogAccountsStorageCredentialInfo, Error<AccountStorageCredentialscreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/metastores/{metastore_id}/storage-credentials", local_var_configuration.base_path, account_id=account_id, metastore_id=metastore_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&catalog_accounts_create_storage_credential);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountStorageCredentialscreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a storage credential from the metastore. The caller must be an owner of the storage credential.
pub async fn account_storage_credentialsdelete(configuration: &configuration::Configuration, account_id: serde_json::Value, metastore_id: serde_json::Value, name: serde_json::Value, force: Option<bool>) -> Result<serde_json::Value, Error<AccountStorageCredentialsdeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/metastores/{metastore_id}/storage-credentials/{name}", local_var_configuration.base_path, account_id=account_id, metastore_id=metastore_id, name=name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = force {
        local_var_req_builder = local_var_req_builder.query(&[("force", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountStorageCredentialsdeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a storage credential from the metastore. The caller must be a metastore admin, the owner of the storage credential, or have a level of privilege on the storage credential. 
pub async fn account_storage_credentialsget(configuration: &configuration::Configuration, account_id: serde_json::Value, metastore_id: serde_json::Value, name: serde_json::Value) -> Result<crate::models::CatalogAccountsStorageCredentialInfo, Error<AccountStorageCredentialsgetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/metastores/{metastore_id}/storage-credentials/{name}", local_var_configuration.base_path, account_id=account_id, metastore_id=metastore_id, name=name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountStorageCredentialsgetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a list of all storage credentials that have been assigned to given metastore.
pub async fn account_storage_credentialslist(configuration: &configuration::Configuration, account_id: serde_json::Value, metastore_id: serde_json::Value) -> Result<crate::models::CatalogListStorageCredentialsResponse, Error<AccountStorageCredentialslistError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/metastores/{metastore_id}/storage-credentials", local_var_configuration.base_path, account_id=account_id, metastore_id=metastore_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountStorageCredentialslistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a storage credential on the metastore. The caller must be the owner of the storage credential. If the caller is a metastore admin, only the __owner__ credential can be changed. 
pub async fn account_storage_credentialsupdate(configuration: &configuration::Configuration, account_id: serde_json::Value, metastore_id: serde_json::Value, name: serde_json::Value, catalog_accounts_update_storage_credential: crate::models::CatalogAccountsUpdateStorageCredential) -> Result<crate::models::CatalogAccountsStorageCredentialInfo, Error<AccountStorageCredentialsupdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/metastores/{metastore_id}/storage-credentials/{name}", local_var_configuration.base_path, account_id=account_id, metastore_id=metastore_id, name=name);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&catalog_accounts_update_storage_credential);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountStorageCredentialsupdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

