/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`vpc_endpointscreate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VpcEndpointscreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`vpc_endpointsdelete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VpcEndpointsdeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`vpc_endpointsget`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VpcEndpointsgetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`vpc_endpointslist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VpcEndpointslistError {
    UnknownValue(serde_json::Value),
}


/// Creates a VPC endpoint configuration, which represents a [VPC endpoint](https://Docsaws.amazon.com/vpc/latest/privatelink/vpc-endpoints.html) object in AWS used to communicate privately with Databricks over [AWS PrivateLink](https://aws.amazon.com/privatelink).  After you create the VPC endpoint configuration, the Databricks [endpoint service](https://Docsaws.amazon.com/vpc/latest/privatelink/privatelink-share-your-services.html) automatically accepts the VPC endpoint.  Before configuring PrivateLink, read the [Databricks article about PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html). 
pub async fn vpc_endpointscreate(configuration: &configuration::Configuration, account_id: serde_json::Value, provisioning_create_vpc_endpoint_request: crate::models::ProvisioningCreateVpcEndpointRequest, x_databricks_gcp_sa_access_token: Option<serde_json::Value>) -> Result<crate::models::ProvisioningVpcEndpoint, Error<VpcEndpointscreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/vpc-endpoints", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = x_databricks_gcp_sa_access_token {
        local_var_req_builder = local_var_req_builder.header("X-Databricks-GCP-SA-Access-Token", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.json(&provisioning_create_vpc_endpoint_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VpcEndpointscreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a VPC endpoint configuration, which represents an [AWS VPC endpoint](https://Docsaws.amazon.com/vpc/latest/privatelink/concepts.html) that can communicate privately with Databricks over [AWS PrivateLink](https://aws.amazon.com/privatelink).  Before configuring PrivateLink, read the [Databricks article about PrivateLink](https://docs.databricks.com/administration-guide/cloud-configurations/aws/privatelink.html). 
pub async fn vpc_endpointsdelete(configuration: &configuration::Configuration, account_id: serde_json::Value, vpc_endpoint_id: serde_json::Value) -> Result<serde_json::Value, Error<VpcEndpointsdeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/vpc-endpoints/{vpc_endpoint_id}", local_var_configuration.base_path, account_id=account_id, vpc_endpoint_id=vpc_endpoint_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VpcEndpointsdeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a VPC endpoint configuration, which represents a [VPC endpoint](https://Docsaws.amazon.com/vpc/latest/privatelink/concepts.html) object in AWS used to communicate privately with Databricks over [AWS PrivateLink](https://aws.amazon.com/privatelink). 
pub async fn vpc_endpointsget(configuration: &configuration::Configuration, account_id: serde_json::Value, vpc_endpoint_id: serde_json::Value) -> Result<crate::models::ProvisioningVpcEndpoint, Error<VpcEndpointsgetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/vpc-endpoints/{vpc_endpoint_id}", local_var_configuration.base_path, account_id=account_id, vpc_endpoint_id=vpc_endpoint_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VpcEndpointsgetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a list of all VPC endpoints for an account, specified by ID.  Before configuring PrivateLink, read the [Databricks article about PrivateLink](https://Docsdatabricks.com/administration-guide/cloud-configurations/aws/privatelink.html). 
pub async fn vpc_endpointslist(configuration: &configuration::Configuration, account_id: serde_json::Value) -> Result<Vec<crate::models::ProvisioningVpcEndpoint>, Error<VpcEndpointslistError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/vpc-endpoints", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VpcEndpointslistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

