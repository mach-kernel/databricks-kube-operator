/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`account_ip_access_listscreate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountIpAccessListscreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_ip_access_listsdelete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountIpAccessListsdeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_ip_access_listsget`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountIpAccessListsgetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_ip_access_listslist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountIpAccessListslistError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_ip_access_listsreplace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountIpAccessListsreplaceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_ip_access_listsupdate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountIpAccessListsupdateError {
    UnknownValue(serde_json::Value),
}


/// Creates an IP access list for the account.  A list can be an allow list or a block list. See the top of this file for a description of how the server treats allow lists and block lists at runtime.  When creating or updating an IP access list:    * For all allow lists and block lists combined, the API supports a maximum of 1000   IP/CIDR values, where one CIDR counts as a single value. Attempts to exceed that number   return error 400 with `error_code` value `QUOTA_EXCEEDED`.   * If the new list would block the calling user's current IP, error 400 is returned with   `error_code` value `INVALID_STATE`.  It can take a few minutes for the changes to take effect. 
pub async fn account_ip_access_listscreate(configuration: &configuration::Configuration, account_id: serde_json::Value, settings_create_ip_access_list: crate::models::SettingsCreateIpAccessList) -> Result<crate::models::SettingsCreateIpAccessListResponse, Error<AccountIpAccessListscreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/accounts/{account_id}/ip-access-lists", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&settings_create_ip_access_list);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountIpAccessListscreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes an IP access list, specified by its list ID.
pub async fn account_ip_access_listsdelete(configuration: &configuration::Configuration, account_id: serde_json::Value, ip_access_list_id: serde_json::Value) -> Result<(), Error<AccountIpAccessListsdeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/accounts/{account_id}/ip-access-lists/{ip_access_list_id}", local_var_configuration.base_path, account_id=account_id, ip_access_list_id=ip_access_list_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<AccountIpAccessListsdeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets an IP access list, specified by its list ID.
pub async fn account_ip_access_listsget(configuration: &configuration::Configuration, ip_access_list_id: &str, account_id: serde_json::Value) -> Result<crate::models::SettingsGetIpAccessListResponse, Error<AccountIpAccessListsgetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/accounts/{account_id}/ip-access-lists/{ip_access_list_id}", local_var_configuration.base_path, ip_access_list_id=crate::apis::urlencode(ip_access_list_id), account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountIpAccessListsgetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets all IP access lists for the specified account.
pub async fn account_ip_access_listslist(configuration: &configuration::Configuration, account_id: serde_json::Value) -> Result<crate::models::SettingsGetIpAccessListsResponse, Error<AccountIpAccessListslistError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/accounts/{account_id}/ip-access-lists", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountIpAccessListslistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Replaces an IP access list, specified by its ID.  A list can include allow lists and block lists. See the top of this file for a description of how the server treats allow lists and block lists at run time. When replacing an IP access list:  * For all allow lists and block lists combined, the API supports a maximum of 1000 IP/CIDR values,    where one CIDR counts as a single value. Attempts to exceed that number return error 400 with `error_code`    value `QUOTA_EXCEEDED`.  * If the resulting list would block the calling user's current IP, error 400 is returned with `error_code`    value `INVALID_STATE`. It can take a few minutes for the changes to take effect. 
pub async fn account_ip_access_listsreplace(configuration: &configuration::Configuration, account_id: serde_json::Value, ip_access_list_id: serde_json::Value, settings_replace_ip_access_list: crate::models::SettingsReplaceIpAccessList) -> Result<serde_json::Value, Error<AccountIpAccessListsreplaceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/accounts/{account_id}/ip-access-lists/{ip_access_list_id}", local_var_configuration.base_path, account_id=account_id, ip_access_list_id=ip_access_list_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&settings_replace_ip_access_list);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountIpAccessListsreplaceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates an existing IP access list, specified by its ID.  A list can include allow lists and block lists. See the top of this file for a description of how the server treats allow lists and block lists at run time.  When updating an IP access list:    * For all allow lists and block lists combined, the API supports a maximum of 1000   IP/CIDR values, where one CIDR counts as a single value. Attempts to exceed that number   return error 400 with `error_code` value `QUOTA_EXCEEDED`.   * If the updated list would block the calling user's current IP, error 400 is returned   with `error_code` value `INVALID_STATE`.  It can take a few minutes for the changes to take effect. 
pub async fn account_ip_access_listsupdate(configuration: &configuration::Configuration, account_id: serde_json::Value, ip_access_list_id: serde_json::Value, settings_update_ip_access_list: crate::models::SettingsUpdateIpAccessList) -> Result<serde_json::Value, Error<AccountIpAccessListsupdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/accounts/{account_id}/ip-access-lists/{ip_access_list_id}", local_var_configuration.base_path, account_id=account_id, ip_access_list_id=ip_access_list_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&settings_update_ip_access_list);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountIpAccessListsupdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

