/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::{apis::ResponseContent, models::{SqlobjectTypePlural, SqlownableObjectType, DbsqlPermissionstransferOwnershipRequest}};
use super::{Error, configuration};


/// struct for typed errors of method [`dbsql_permissionsget`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DbsqlPermissionsgetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dbsql_permissionsset`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DbsqlPermissionssetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dbsql_permissionstransfer_ownership`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DbsqlPermissionstransferOwnershipError {
    UnknownValue(serde_json::Value),
}


/// Gets a JSON representation of the access control list (ACL) for a specified object. 
pub async fn dbsql_permissionsget(configuration: &configuration::Configuration, object_type: SqlobjectTypePlural, object_id: &str) -> Result<crate::models::DbsqlPermissionsget200Response, Error<DbsqlPermissionsgetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/sql/permissions/{objectType}/{objectId}", local_var_configuration.base_path, objectType=object_type.to_string(), objectId=crate::apis::urlencode(object_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DbsqlPermissionsgetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sets the access control list (ACL) for a specified object. This operation will complete rewrite the ACL. 
pub async fn dbsql_permissionsset(configuration: &configuration::Configuration, object_type: SqlobjectTypePlural, object_id: &str, dbsql_permissionsset_request: crate::models::DbsqlPermissionssetRequest) -> Result<crate::models::DbsqlPermissionsget200Response, Error<DbsqlPermissionssetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/sql/permissions/{objectType}/{objectId}", local_var_configuration.base_path, objectType=object_type.to_string(), objectId=crate::apis::urlencode(object_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&dbsql_permissionsset_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DbsqlPermissionssetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Transfers ownership of a dashboard, query, or alert to an active user. Requires an admin API key. 
pub async fn dbsql_permissionstransfer_ownership(configuration: &configuration::Configuration, object_type: SqlownableObjectType, object_id: DbsqlPermissionstransferOwnershipRequest, dbsql_permissionstransfer_ownership_request: crate::models::DbsqlPermissionstransferOwnershipRequest) -> Result<crate::models::SqlSuccess, Error<DbsqlPermissionstransferOwnershipError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/preview/sql/permissions/{objectType}/{objectId}/transfer", local_var_configuration.base_path, objectType=object_type.to_string(), objectId=object_id.new_owner.expect("Must provide new owner"));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&dbsql_permissionstransfer_ownership_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DbsqlPermissionstransferOwnershipError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

