/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`subentity_tagslist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubentityTagslistError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`subentity_tagsupdate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubentityTagsupdateError {
    UnknownValue(serde_json::Value),
}


/// Gets tag assignments for a subentity associated with a securable entity. Eg. column of a table The caller must be either the owner of the securable, or a metastore admin, or have at least USE / SELECT privilege on the associated securable. 
pub async fn subentity_tagslist(configuration: &configuration::Configuration, securable_type: serde_json::Value, full_name: serde_json::Value, subentity_name: &str) -> Result<crate::models::CatalogTagSubentityAssignmentsList, Error<SubentityTagslistError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.1/unity-catalog/subentity-tags/{securable_type}/{full_name}/{subentity_name}", local_var_configuration.base_path, securable_type=securable_type, full_name=full_name, subentity_name=crate::apis::urlencode(subentity_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SubentityTagslistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update tag assignments for a subentity associated with a securable entity. The caller must be either the owner of the securable, or a metastore admin, or have at least USE / SELECT and APPLY_TAG privilege on the associated securable. 
pub async fn subentity_tagsupdate(configuration: &configuration::Configuration, securable_type: serde_json::Value, full_name: serde_json::Value, subentity_name: &str, catalog_update_tags: Option<crate::models::CatalogUpdateTags>) -> Result<crate::models::CatalogTagSubentityAssignmentsList, Error<SubentityTagsupdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.1/unity-catalog/subentity-tags/{securable_type}/{full_name}/{subentity_name}", local_var_configuration.base_path, securable_type=securable_type, full_name=full_name, subentity_name=crate::apis::urlencode(subentity_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&catalog_update_tags);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SubentityTagsupdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

