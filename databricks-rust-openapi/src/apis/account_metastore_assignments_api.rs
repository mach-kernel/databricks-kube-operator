/*
 * Databricks Accounts and Workspace REST API on ALL
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`account_metastore_assignmentscreate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountMetastoreAssignmentscreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_metastore_assignmentsdelete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountMetastoreAssignmentsdeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_metastore_assignmentsget`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountMetastoreAssignmentsgetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_metastore_assignmentslist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountMetastoreAssignmentslistError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_metastore_assignmentsupdate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountMetastoreAssignmentsupdateError {
    UnknownValue(serde_json::Value),
}


/// Creates an assignment to a metastore for a workspace 
pub async fn account_metastore_assignmentscreate(configuration: &configuration::Configuration, account_id: serde_json::Value, workspace_id: serde_json::Value, metastore_id: serde_json::Value, catalog_accounts_create_metastore_assignment: crate::models::CatalogAccountsCreateMetastoreAssignment) -> Result<(), Error<AccountMetastoreAssignmentscreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/workspaces/{workspace_id}/metastores/{metastore_id}", local_var_configuration.base_path, account_id=account_id, workspace_id=workspace_id, metastore_id=metastore_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&catalog_accounts_create_metastore_assignment);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<AccountMetastoreAssignmentscreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a metastore assignment to a workspace, leaving the workspace with no metastore. 
pub async fn account_metastore_assignmentsdelete(configuration: &configuration::Configuration, account_id: serde_json::Value, workspace_id: serde_json::Value, metastore_id: serde_json::Value) -> Result<serde_json::Value, Error<AccountMetastoreAssignmentsdeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/workspaces/{workspace_id}/metastores/{metastore_id}", local_var_configuration.base_path, account_id=account_id, workspace_id=workspace_id, metastore_id=metastore_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountMetastoreAssignmentsdeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets the metastore assignment, if any, for the workspace specified by ID. If the workspace is assigned a metastore, the mappig will be returned. If no metastore is assigned to the workspace, the assignment will not be found and a 404 returned. 
pub async fn account_metastore_assignmentsget(configuration: &configuration::Configuration, account_id: serde_json::Value, workspace_id: serde_json::Value) -> Result<crate::models::CatalogAccountsMetastoreAssignment, Error<AccountMetastoreAssignmentsgetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/workspaces/{workspace_id}/metastore", local_var_configuration.base_path, account_id=account_id, workspace_id=workspace_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountMetastoreAssignmentsgetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets a list of all Databricks workspace IDs that have been assigned to given metastore. 
pub async fn account_metastore_assignmentslist(configuration: &configuration::Configuration, account_id: serde_json::Value, metastore_id: serde_json::Value) -> Result<Vec<crate::models::CatalogMetastoreAssignment>, Error<AccountMetastoreAssignmentslistError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/metastores/{metastore_id}/workspaces", local_var_configuration.base_path, account_id=account_id, metastore_id=metastore_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountMetastoreAssignmentslistError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates an assignment to a metastore for a workspace. Currently, only the default catalog may be updated. 
pub async fn account_metastore_assignmentsupdate(configuration: &configuration::Configuration, account_id: serde_json::Value, workspace_id: serde_json::Value, metastore_id: serde_json::Value, catalog_accounts_update_metastore_assignment: crate::models::CatalogAccountsUpdateMetastoreAssignment) -> Result<serde_json::Value, Error<AccountMetastoreAssignmentsupdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/2.0/accounts/{account_id}/workspaces/{workspace_id}/metastores/{metastore_id}", local_var_configuration.base_path, account_id=account_id, workspace_id=workspace_id, metastore_id=metastore_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&catalog_accounts_update_metastore_assignment);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountMetastoreAssignmentsupdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

