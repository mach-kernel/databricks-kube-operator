openapi: 3.0.0
info:
  version: 2.0.0
  title: Git Credentials API
  description: >-
    The Git credentials API allows users to manage their [Git
    credentials](https://docs.databricks.com/repos.html#configure-your-git-integration-with-databricks)
    to use [Databricks Repos](https://docs.databricks.com/repos.html).
servers:
  - url: https://<databricks-instance>/api/2.0
    description: >-
      In the URL, substitute `<databricks-instance>` with the domain name of
      your deployment. Use the form `<account>.cloud.databricks.com`.
paths:
  /git-credentials:
    description: This endpoint manages Git credentials for the calling user.
    get:
      summary: Get Git credentials
      description: >-
        Returns the calling user's Git credentials. One credential per user is
        supported.
      operationId: get-git-credential-list
      responses:
        '200':
          description: Git credentials were successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialsResponse'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a Git credential entry
      description: >-
        Creates a Git credential entry for the user. Only one Git credential per
        user is supported, so any attempts to create credentials if an entry
        already exists will fail. Use the PATCH endpoint to update existing
        credentials, or the DELETE endpoint to delete existing credentials.
      operationId: create-git-credential
      requestBody:
        description: Details required to create a Git credential entry
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredentialRequest'
      responses:
        '200':
          description: The credential was successfully configured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialResponse'
        '400':
          $ref: '#/components/responses/BadRequestPost'
        '500':
          $ref: '#/components/responses/InternalError'
  /git-credentials/{credential_id}:
    description: This endpoint manages a specific Git credential entry.
    parameters:
      - name: credential_id
        in: path
        schema:
          type: string
        description: The ID for the corresponding credential to access.
        required: true
    get:
      summary: Get a credential entry
      description: Returns the credential with the given credential ID.
      operationId: get-git-credential
      responses:
        '200':
          description: The credential was successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialResponse'
        '404':
          $ref: '#/components/responses/CredentialNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Updates the credential
      description: Updates the credential.
      operationId: update-git-credential
      requestBody:
        description: Details required to update the credential
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialRequest'
      responses:
        '200':
          description: The credential was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialResponse'
        '400':
          $ref: '#/components/responses/InvalidGitProvider'
        '404':
          $ref: '#/components/responses/CredentialNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Deletes the credential
      description: Deletes the specified credential
      operationId: delete-git-credential
      responses:
        '200':
          description: The credential was successfully deleted.
        '404':
          $ref: '#/components/responses/CredentialNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  schemas:
    credential_id:
      type: integer
      format: int64
      description: ID of the credential object in the workspace.
      example: 93488329053511
    git_username:
      type: string
      description: Git username.
      example: testuser
    git_provider:
      type: string
      description: >-
        Git provider. This field is case-insensitive. The available Git
        providers are awsCodeCommit, azureDevOpsServices, bitbucketCloud,
        bitbucketServer, gitHub, gitHubEnterprise, gitLab, and
        gitLabEnterpriseEdition.
      example: gitHub
    personal_access_token:
      type: string
      description: >-
        The personal access token used to authenticate to the corresponding Git
        provider.
      example: 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
    GetCredentialResponse:
      type: object
      properties:
        credential_id:
          $ref: '#/components/schemas/credential_id'
        git_username:
          $ref: '#/components/schemas/git_username'
        git_provider:
          $ref: '#/components/schemas/git_provider'
    GetCredentialsResponse:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/GetCredentialResponse'
    CreateCredentialRequest:
      type: object
      required:
        - git_provider
        - personal_access_token
        - git_username
      properties:
        personal_access_token:
          $ref: '#/components/schemas/personal_access_token'
        git_username:
          $ref: '#/components/schemas/git_username'
        git_provider:
          $ref: '#/components/schemas/git_provider'
    UpdateCredentialRequest:
      type: object
      required:
        - personal_access_token
      properties:
        personal_access_token:
          $ref: '#/components/schemas/personal_access_token'
        git_username:
          $ref: '#/components/schemas/git_username'
        git_provider:
          $ref: '#/components/schemas/git_provider'
    Error:
      type: object
      properties:
        error_code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message describing the cause of the error.
  responses:
    BadRequestPost:
      description: Request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            credential_already_exists:
              value:
                error_code: CREDENTIAL_ALREADY_EXISTS
                message: >-
                  Only one Git credential is supported. To update your
                  credential, use the PATCH endpoint.
            personal_access_token_missing:
              value:
                error_code: TOKEN_MISSING
                message: >-
                  Personal access token is a required field for all Git
                  providers.
            git_username_missing:
              value:
                error_code: GIT_USERNAME_MISSING
                message: Git username is a required field for all Git providers.
    CredentialNotFound:
      description: Credential with the specified ID does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            credential_not_found:
              value:
                error_code: CREDENTIAL_NOT_FOUND
                message: Credential with the specified ID not found.
    InvalidGitProvider:
      description: The specified Git provider is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            bad_request:
              value:
                error_code: INVALID_GIT_PROVIDER
                message: >-
                  The specified Git provider is invalid. The available Git
                  providers are awsCodeCommit, azureDevOpsServices,
                  bitbucketCloud, bitbucketServer, gitHub, gitHubEnterprise,
                  gitLab, and gitLabEnterpriseEdition.
    InternalError:
      description: The request was not handled correctly due to a server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            internal_error:
              value:
                error_code: INTERNAL_ERROR
                message: >-
                  There was an error performing the operation. Please try again
                  or open a support ticket.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: String
      in: header
      name: Token
      description: >-
        You can authenticate with a Databricks personal access token that you
        create for yourself within the application user interface.
    basicAuth:
      type: http
      scheme: basic
      in: header
      name: HTTP Basic authentication
      description: >-
        HTTP Basic authentication with a name and password for non-SSO
        authentication.
security:
  - bearerAuth: []
  - basicAuth: []
